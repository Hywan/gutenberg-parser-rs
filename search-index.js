var searchIndex = {};
searchIndex["gutenberg_post_parser"] = {"doc":"The Gutenberg post parser","items":[[5,"root","gutenberg_post_parser","The `root` function represents the axiom of the grammar, i.e. the top rule.",null,{"inputs":[{"name":"input"}],"output":{"generics":["err"],"name":"result"}}],[0,"ast","","The Abstract Syntax Tree (AST), i.e. the output of the parser.",null,null],[4,"Node","gutenberg_post_parser::ast","Represent a node in an AST.",null,null],[13,"Block","","A block is the elementary component of the post format.",0,null],[12,"name","gutenberg_post_parser::ast::Node","The fully-qualified block name, where the left part of the pair represents the namespace, and the right part of the pair represents the block name.",0,null],[12,"attributes","","A block can have attributes, just like an HTML element can have attributes. Attributes are encoded as a JSON string.",0,null],[12,"children","","A block can have inner blocks or phrases.",0,null],[13,"Phrase","gutenberg_post_parser::ast","Anything that is not a block.",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"combinators","gutenberg_post_parser","Additional combinators specifically tailored for this parser.",null,null],[5,"fold_into_vector","gutenberg_post_parser::combinators","Helper to fold an item into a vector.",null,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[0,"parser","gutenberg_post_parser","The Gutenberg post parser.",null,null],[5,"block_list","gutenberg_post_parser::parser","Axiom of the grammar: Recognize a list of blocks.",null,{"inputs":[{"name":"input"}],"output":{"generics":["input","vec","u32"],"name":"iresult"}}],[5,"phrase","","Recognize a phrase.",null,{"inputs":[{"name":"input"}],"output":{"generics":["input","node","u32"],"name":"iresult"}}],[5,"block","","Recognize a block.",null,{"inputs":[{"name":"input"}],"output":{"generics":["input","node","u32"],"name":"iresult"}}],[5,"block_name","","Recognize a fully-qualified block name.",null,{"inputs":[{"name":"input"}],"output":{"generics":["input","u32"],"name":"iresult"}}],[5,"namespaced_block_name","","Recognize a namespaced block name.",null,{"inputs":[{"name":"input"}],"output":{"generics":["input","u32"],"name":"iresult"}}],[5,"core_block_name","","Recognize a globally-namespaced block name.",null,{"inputs":[{"name":"input"}],"output":{"generics":["input","u32"],"name":"iresult"}}],[5,"block_name_part","","Recognize a block name part.",null,null],[5,"block_attributes","","Recognize block attributes.",null,null],[5,"whitespaces","","Recognize whitespaces.",null,null],[6,"InputElement","gutenberg_post_parser","Represent the type of a parser input element. See `Input` for more information.",null,null],[6,"Input","","Represent the type of a parser input.",null,null],[14,"take_until_terminated","","`take_until_terminated(S, C)` is like `take_until` but with a lookahead combinator `C`. It's not similar to `terminated!(take_until(S, peek!(C)))` because it loops over the input until `C` is true.",null,null],[14,"take_until_terminated_and_consume","","`take_until_terminated_and_consume(S, C)` is similar to `take_until_terminated` but it consumes `S`.",null,null],[14,"fold_into_vector_many0","","`fold_into_vector_many0!(I -> IResult<I,O>, R) => I -> IResult<I, R>` is a wrapper around `fold_many0!` specifically designed for vectors.",null,null]],"paths":[[4,"Node"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",20,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",21,null],[12,"sin6_family","","",21,null],[12,"sin6_port","","",21,null],[12,"sin6_flowinfo","","",21,null],[12,"sin6_addr","","",21,null],[12,"sin6_scope_id","","",21,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",22,null],[12,"sun_family","","",22,null],[12,"sun_path","","",22,null],[3,"passwd","","",null,null],[12,"pw_name","","",23,null],[12,"pw_passwd","","",23,null],[12,"pw_uid","","",23,null],[12,"pw_gid","","",23,null],[12,"pw_change","","",23,null],[12,"pw_class","","",23,null],[12,"pw_gecos","","",23,null],[12,"pw_dir","","",23,null],[12,"pw_shell","","",23,null],[12,"pw_expire","","",23,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",24,null],[12,"ifa_name","","",24,null],[12,"ifa_flags","","",24,null],[12,"ifa_addr","","",24,null],[12,"ifa_netmask","","",24,null],[12,"ifa_dstaddr","","",24,null],[12,"ifa_data","","",24,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",25,null],[12,"tm_min","","",25,null],[12,"tm_hour","","",25,null],[12,"tm_mday","","",25,null],[12,"tm_mon","","",25,null],[12,"tm_year","","",25,null],[12,"tm_wday","","",25,null],[12,"tm_yday","","",25,null],[12,"tm_isdst","","",25,null],[12,"tm_gmtoff","","",25,null],[12,"tm_zone","","",25,null],[3,"utsname","","",null,null],[12,"sysname","","",26,null],[12,"nodename","","",26,null],[12,"release","","",26,null],[12,"version","","",26,null],[12,"machine","","",26,null],[3,"msghdr","","",null,null],[12,"msg_name","","",27,null],[12,"msg_namelen","","",27,null],[12,"msg_iov","","",27,null],[12,"msg_iovlen","","",27,null],[12,"msg_control","","",27,null],[12,"msg_controllen","","",27,null],[12,"msg_flags","","",27,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",28,null],[12,"cmsg_level","","",28,null],[12,"cmsg_type","","",28,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",29,null],[12,"if_name","","",29,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",30,null],[12,"aio_offset","","",30,null],[12,"aio_buf","","",30,null],[12,"aio_nbytes","","",30,null],[12,"aio_reqprio","","",30,null],[12,"aio_sigevent","","",30,null],[12,"aio_lio_opcode","","",30,null],[3,"utmpx","","",null,null],[12,"ut_user","","",31,null],[12,"ut_id","","",31,null],[12,"ut_line","","",31,null],[12,"ut_pid","","",31,null],[12,"ut_type","","",31,null],[12,"ut_tv","","",31,null],[12,"ut_host","","",31,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_pathv","","",32,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",33,null],[12,"ss_family","","",33,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",34,null],[12,"ai_family","","",34,null],[12,"ai_socktype","","",34,null],[12,"ai_protocol","","",34,null],[12,"ai_addrlen","","",34,null],[12,"ai_canonname","","",34,null],[12,"ai_addr","","",34,null],[12,"ai_next","","",34,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",35,null],[12,"denom","","",35,null],[3,"stat","","",null,null],[12,"st_dev","","",36,null],[12,"st_mode","","",36,null],[12,"st_nlink","","",36,null],[12,"st_ino","","",36,null],[12,"st_uid","","",36,null],[12,"st_gid","","",36,null],[12,"st_rdev","","",36,null],[12,"st_atime","","",36,null],[12,"st_atime_nsec","","",36,null],[12,"st_mtime","","",36,null],[12,"st_mtime_nsec","","",36,null],[12,"st_ctime","","",36,null],[12,"st_ctime_nsec","","",36,null],[12,"st_birthtime","","",36,null],[12,"st_birthtime_nsec","","",36,null],[12,"st_size","","",36,null],[12,"st_blocks","","",36,null],[12,"st_blksize","","",36,null],[12,"st_flags","","",36,null],[12,"st_gen","","",36,null],[12,"st_lspare","","",36,null],[12,"st_qspare","","",36,null],[3,"dirent","","",null,null],[12,"d_ino","","",37,null],[12,"d_seekoff","","",37,null],[12,"d_reclen","","",37,null],[12,"d_namlen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",38,null],[12,"si_errno","","",38,null],[12,"si_code","","",38,null],[12,"si_pid","","",38,null],[12,"si_uid","","",38,null],[12,"si_status","","",38,null],[12,"si_addr","","",38,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",39,null],[12,"sa_mask","","",39,null],[12,"sa_flags","","",39,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",40,null],[12,"ss_size","","",40,null],[12,"ss_flags","","",40,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",41,null],[12,"fst_posmode","","",41,null],[12,"fst_offset","","",41,null],[12,"fst_length","","",41,null],[12,"fst_bytesalloc","","",41,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",42,null],[12,"ra_count","","",42,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",43,null],[12,"f_frsize","","",43,null],[12,"f_blocks","","",43,null],[12,"f_bfree","","",43,null],[12,"f_bavail","","",43,null],[12,"f_files","","",43,null],[12,"f_ffree","","",43,null],[12,"f_favail","","",43,null],[12,"f_fsid","","",43,null],[12,"f_flag","","",43,null],[12,"f_namemax","","",43,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",44,null],[12,"dli_fbase","","",44,null],[12,"dli_sname","","",44,null],[12,"dli_saddr","","",44,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",45,null],[12,"sin_family","","",45,null],[12,"sin_port","","",45,null],[12,"sin_addr","","",45,null],[12,"sin_zero","","",45,null],[3,"statfs","","",null,null],[12,"f_bsize","","",46,null],[12,"f_iosize","","",46,null],[12,"f_blocks","","",46,null],[12,"f_bfree","","",46,null],[12,"f_bavail","","",46,null],[12,"f_files","","",46,null],[12,"f_ffree","","",46,null],[12,"f_fsid","","",46,null],[12,"f_owner","","",46,null],[12,"f_type","","",46,null],[12,"f_flags","","",46,null],[12,"f_fssubtype","","",46,null],[12,"f_fstypename","","",46,null],[12,"f_mntonname","","",46,null],[12,"f_mntfromname","","",46,null],[12,"f_reserved","","",46,null],[3,"kevent","","",null,null],[12,"ident","","",47,null],[12,"filter","","",47,null],[12,"flags","","",47,null],[12,"fflags","","",47,null],[12,"data","","",47,null],[12,"udata","","",47,null],[3,"kevent64_s","","",null,null],[12,"ident","","",48,null],[12,"filter","","",48,null],[12,"flags","","",48,null],[12,"fflags","","",48,null],[12,"data","","",48,null],[12,"udata","","",48,null],[12,"ext","","",48,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",49,null],[12,"dqb_bsoftlimit","","",49,null],[12,"dqb_curbytes","","",49,null],[12,"dqb_ihardlimit","","",49,null],[12,"dqb_isoftlimit","","",49,null],[12,"dqb_curinodes","","",49,null],[12,"dqb_btime","","",49,null],[12,"dqb_itime","","",49,null],[12,"dqb_id","","",49,null],[12,"dqb_spare","","",49,null],[3,"if_msghdr","","",null,null],[12,"ifm_msglen","","",50,null],[12,"ifm_version","","",50,null],[12,"ifm_type","","",50,null],[12,"ifm_addrs","","",50,null],[12,"ifm_flags","","",50,null],[12,"ifm_index","","",50,null],[12,"ifm_data","","",50,null],[3,"termios","","",null,null],[12,"c_iflag","","",51,null],[12,"c_oflag","","",51,null],[12,"c_cflag","","",51,null],[12,"c_lflag","","",51,null],[12,"c_cc","","",51,null],[12,"c_ispeed","","",51,null],[12,"c_ospeed","","",51,null],[3,"flock","","",null,null],[12,"l_start","","",52,null],[12,"l_len","","",52,null],[12,"l_pid","","",52,null],[12,"l_type","","",52,null],[12,"l_whence","","",52,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",53,null],[12,"hdr_cnt","","",53,null],[12,"trailers","","",53,null],[12,"trl_cnt","","",53,null],[3,"lconv","","",null,null],[12,"decimal_point","","",54,null],[12,"thousands_sep","","",54,null],[12,"grouping","","",54,null],[12,"int_curr_symbol","","",54,null],[12,"currency_symbol","","",54,null],[12,"mon_decimal_point","","",54,null],[12,"mon_thousands_sep","","",54,null],[12,"mon_grouping","","",54,null],[12,"positive_sign","","",54,null],[12,"negative_sign","","",54,null],[12,"int_frac_digits","","",54,null],[12,"frac_digits","","",54,null],[12,"p_cs_precedes","","",54,null],[12,"p_sep_by_space","","",54,null],[12,"n_cs_precedes","","",54,null],[12,"n_sep_by_space","","",54,null],[12,"p_sign_posn","","",54,null],[12,"n_sign_posn","","",54,null],[12,"int_p_cs_precedes","","",54,null],[12,"int_n_cs_precedes","","",54,null],[12,"int_p_sep_by_space","","",54,null],[12,"int_n_sep_by_space","","",54,null],[12,"int_p_sign_posn","","",54,null],[12,"int_n_sign_posn","","",54,null],[3,"sigevent","","",null,null],[12,"sigev_notify","","",55,null],[12,"sigev_signo","","",55,null],[12,"sigev_value","","",55,null],[12,"sigev_notify_attributes","","",55,null],[3,"proc_taskinfo","","",null,null],[12,"pti_virtual_size","","",56,null],[12,"pti_resident_size","","",56,null],[12,"pti_total_user","","",56,null],[12,"pti_total_system","","",56,null],[12,"pti_threads_user","","",56,null],[12,"pti_threads_system","","",56,null],[12,"pti_policy","","",56,null],[12,"pti_faults","","",56,null],[12,"pti_pageins","","",56,null],[12,"pti_cow_faults","","",56,null],[12,"pti_messages_sent","","",56,null],[12,"pti_messages_received","","",56,null],[12,"pti_syscalls_mach","","",56,null],[12,"pti_syscalls_unix","","",56,null],[12,"pti_csw","","",56,null],[12,"pti_threadnum","","",56,null],[12,"pti_numrunning","","",56,null],[12,"pti_priority","","",56,null],[3,"proc_bsdinfo","","",null,null],[12,"pbi_flags","","",57,null],[12,"pbi_status","","",57,null],[12,"pbi_xstatus","","",57,null],[12,"pbi_pid","","",57,null],[12,"pbi_ppid","","",57,null],[12,"pbi_uid","","",57,null],[12,"pbi_gid","","",57,null],[12,"pbi_ruid","","",57,null],[12,"pbi_rgid","","",57,null],[12,"pbi_svuid","","",57,null],[12,"pbi_svgid","","",57,null],[12,"rfu_1","","",57,null],[12,"pbi_comm","","",57,null],[12,"pbi_name","","",57,null],[12,"pbi_nfiles","","",57,null],[12,"pbi_pgid","","",57,null],[12,"pbi_pjobc","","",57,null],[12,"e_tdev","","",57,null],[12,"e_tpgid","","",57,null],[12,"pbi_nice","","",57,null],[12,"pbi_start_tvsec","","",57,null],[12,"pbi_start_tvusec","","",57,null],[3,"proc_taskallinfo","","",null,null],[12,"pbsd","","",58,null],[12,"ptinfo","","",58,null],[3,"proc_threadinfo","","",null,null],[12,"pth_user_time","","",59,null],[12,"pth_system_time","","",59,null],[12,"pth_cpu_usage","","",59,null],[12,"pth_policy","","",59,null],[12,"pth_run_state","","",59,null],[12,"pth_flags","","",59,null],[12,"pth_sleep_time","","",59,null],[12,"pth_curpri","","",59,null],[12,"pth_priority","","",59,null],[12,"pth_maxpriority","","",59,null],[12,"pth_name","","",59,null],[3,"xsw_usage","","",null,null],[12,"xsu_total","","",60,null],[12,"xsu_avail","","",60,null],[12,"xsu_used","","",60,null],[12,"xsu_pagesize","","",60,null],[12,"xsu_encrypted","","",60,null],[3,"xucred","","",null,null],[12,"cr_version","","",61,null],[12,"cr_uid","","",61,null],[12,"cr_ngroups","","",61,null],[12,"cr_groups","","",61,null],[3,"mach_header","","",null,null],[12,"magic","","",62,null],[12,"cputype","","",62,null],[12,"cpusubtype","","",62,null],[12,"filetype","","",62,null],[12,"ncmds","","",62,null],[12,"sizeofcmds","","",62,null],[12,"flags","","",62,null],[3,"mach_header_64","","",null,null],[12,"magic","","",63,null],[12,"cputype","","",63,null],[12,"cpusubtype","","",63,null],[12,"filetype","","",63,null],[12,"ncmds","","",63,null],[12,"sizeofcmds","","",63,null],[12,"flags","","",63,null],[12,"reserved","","",63,null],[3,"segment_command","","",null,null],[12,"cmd","","",64,null],[12,"cmdsize","","",64,null],[12,"segname","","",64,null],[12,"vmaddr","","",64,null],[12,"vmsize","","",64,null],[12,"fileoff","","",64,null],[12,"filesize","","",64,null],[12,"maxprot","","",64,null],[12,"initprot","","",64,null],[12,"nsects","","",64,null],[12,"flags","","",64,null],[3,"segment_command_64","","",null,null],[12,"cmd","","",65,null],[12,"cmdsize","","",65,null],[12,"segname","","",65,null],[12,"vmaddr","","",65,null],[12,"vmsize","","",65,null],[12,"fileoff","","",65,null],[12,"filesize","","",65,null],[12,"maxprot","","",65,null],[12,"initprot","","",65,null],[12,"nsects","","",65,null],[12,"flags","","",65,null],[3,"load_command","","",null,null],[12,"cmd","","",66,null],[12,"cmdsize","","",66,null],[3,"sockaddr_dl","","",null,null],[12,"sdl_len","","",67,null],[12,"sdl_family","","",67,null],[12,"sdl_index","","",67,null],[12,"sdl_type","","",67,null],[12,"sdl_nlen","","",67,null],[12,"sdl_alen","","",67,null],[12,"sdl_slen","","",67,null],[12,"sdl_data","","",67,null],[3,"sockaddr_inarp","","",null,null],[12,"sin_len","","",68,null],[12,"sin_family","","",68,null],[12,"sin_port","","",68,null],[12,"sin_addr","","",68,null],[12,"sin_srcaddr","","",68,null],[12,"sin_tos","","",68,null],[12,"sin_other","","",68,null],[3,"sockaddr_ctl","","",null,null],[12,"sc_len","","",69,null],[12,"sc_family","","",69,null],[12,"ss_sysaddr","","",69,null],[12,"sc_id","","",69,null],[12,"sc_unit","","",69,null],[12,"sc_reserved","","",69,null],[3,"in_pktinfo","","",null,null],[12,"ipi_ifindex","","",70,null],[12,"ipi_spec_dst","","",70,null],[12,"ipi_addr","","",70,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",71,null],[12,"ipi6_ifindex","","",71,null],[3,"ipc_perm","","",null,null],[12,"uid","","",72,null],[12,"gid","","",72,null],[12,"cuid","","",72,null],[12,"cgid","","",72,null],[12,"mode","","",72,null],[12,"_seq","","",72,null],[12,"_key","","",72,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",73,null],[12,"shm_segsz","","",73,null],[12,"shm_lpid","","",73,null],[12,"shm_cpid","","",73,null],[12,"shm_nattch","","",73,null],[12,"shm_atime","","",73,null],[12,"shm_dtime","","",73,null],[12,"shm_ctime","","",73,null],[12,"shm_internal","","",73,null],[3,"pthread_attr_t","","",null,null],[3,"timeval32","","",null,null],[12,"tv_sec","","",74,null],[12,"tv_usec","","",74,null],[3,"if_data","","",null,null],[12,"ifi_type","","",75,null],[12,"ifi_typelen","","",75,null],[12,"ifi_physical","","",75,null],[12,"ifi_addrlen","","",75,null],[12,"ifi_hdrlen","","",75,null],[12,"ifi_recvquota","","",75,null],[12,"ifi_xmitquota","","",75,null],[12,"ifi_unused1","","",75,null],[12,"ifi_mtu","","",75,null],[12,"ifi_metric","","",75,null],[12,"ifi_baudrate","","",75,null],[12,"ifi_ipackets","","",75,null],[12,"ifi_ierrors","","",75,null],[12,"ifi_opackets","","",75,null],[12,"ifi_oerrors","","",75,null],[12,"ifi_collisions","","",75,null],[12,"ifi_ibytes","","",75,null],[12,"ifi_obytes","","",75,null],[12,"ifi_imcasts","","",75,null],[12,"ifi_omcasts","","",75,null],[12,"ifi_iqdrops","","",75,null],[12,"ifi_noproto","","",75,null],[12,"ifi_recvtiming","","",75,null],[12,"ifi_xmittiming","","",75,null],[12,"ifi_lastchange","","",75,null],[12,"ifi_unused2","","",75,null],[12,"ifi_hwassist","","",75,null],[12,"ifi_reserved1","","",75,null],[12,"ifi_reserved2","","",75,null],[3,"bpf_hdr","","",null,null],[12,"bh_tstamp","","",76,null],[12,"bh_caplen","","",76,null],[12,"bh_datalen","","",76,null],[12,"bh_hdrlen","","",76,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"getpeereid","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"sync","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"lio_listio","","",null,null],[5,"dirfd","","",null,null],[5,"lutimes","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"utmpxname","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"shmget","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"getxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"getgrouplist","","",null,null],[5,"initgroups","","",null,null],[5,"waitid","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"settimeofday","","",null,null],[5,"_dyld_image_count","","",null,null],[5,"_dyld_get_image_header","","",null,null],[5,"_dyld_get_image_vmaddr_slide","","",null,null],[5,"_dyld_get_image_name","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"timeval32"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"if_data"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bpf_hdr"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"fstore_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"radvisory"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"kevent"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"if_msghdr"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"sf_hdtr"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"proc_taskinfo"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"proc_bsdinfo"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"proc_taskallinfo"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"proc_threadinfo"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"xsw_usage"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"xucred"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"mach_header"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"mach_header_64"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"segment_command"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"segment_command_64"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"load_command"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_dl"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_inarp"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ctl"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"in_pktinfo"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"in6_pktinfo"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"c_char","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"clockid_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"sem_t","","",null,null],[6,"idtype_t","","",null,null],[6,"integer_t","","",null,null],[6,"cpu_type_t","","",null,null],[6,"cpu_subtype_t","","",null,null],[6,"vm_prot_t","","",null,null],[6,"posix_spawnattr_t","","",null,null],[6,"posix_spawn_file_actions_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"boolean_t","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"NCCS","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_SHLOCK","","",null,null],[17,"O_EXLOCK","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VDSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"VSTATUS","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CIGNORE","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"ALTWERASE","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"NOKERNINFO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"MDMBUF","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_SELF","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"_UTX_USERSIZE","","",null,null],[17,"_UTX_LINESIZE","","",null,null],[17,"_UTX_IDSIZE","","",null,null],[17,"_UTX_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SIGNATURE","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"VM_FLAGS_FIXED","","",null,null],[17,"VM_FLAGS_ANYWHERE","","",null,null],[17,"VM_FLAGS_PURGABLE","","",null,null],[17,"VM_FLAGS_RANDOM_ADDR","","",null,null],[17,"VM_FLAGS_NO_CACHE","","",null,null],[17,"VM_FLAGS_RESILIENT_CODESIGN","","",null,null],[17,"VM_FLAGS_RESILIENT_MEDIA","","",null,null],[17,"VM_FLAGS_OVERWRITE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_MASK","","",null,null],[17,"VM_FLAGS_RETURN_DATA_ADDR","","",null,null],[17,"VM_FLAGS_RETURN_4K_DATA_ADDR","","",null,null],[17,"VM_FLAGS_ALIAS_MASK","","",null,null],[17,"VM_FLAGS_USER_ALLOCATE","","",null,null],[17,"VM_FLAGS_USER_MAP","","",null,null],[17,"VM_FLAGS_USER_REMAP","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SHIFT","","",null,null],[17,"SUPERPAGE_NONE","","",null,null],[17,"SUPERPAGE_SIZE_ANY","","",null,null],[17,"VM_FLAGS_SUPERPAGE_NONE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_ANY","","",null,null],[17,"SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_MEMORY_MALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_SMALL","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE","","",null,null],[17,"VM_MEMORY_MALLOC_HUGE","","",null,null],[17,"VM_MEMORY_SBRK","","",null,null],[17,"VM_MEMORY_REALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_TINY","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSABLE","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSED","","",null,null],[17,"VM_MEMORY_ANALYSIS_TOOL","","",null,null],[17,"VM_MEMORY_MALLOC_NANO","","",null,null],[17,"VM_MEMORY_MACH_MSG","","",null,null],[17,"VM_MEMORY_IOKIT","","",null,null],[17,"VM_MEMORY_STACK","","",null,null],[17,"VM_MEMORY_GUARD","","",null,null],[17,"VM_MEMORY_SHARED_PMAP","","",null,null],[17,"VM_MEMORY_DYLIB","","",null,null],[17,"VM_MEMORY_OBJC_DISPATCHERS","","",null,null],[17,"VM_MEMORY_UNSHARED_PMAP","","",null,null],[17,"VM_MEMORY_APPKIT","","",null,null],[17,"VM_MEMORY_FOUNDATION","","",null,null],[17,"VM_MEMORY_COREGRAPHICS","","",null,null],[17,"VM_MEMORY_CORESERVICES","","",null,null],[17,"VM_MEMORY_CARBON","","",null,null],[17,"VM_MEMORY_JAVA","","",null,null],[17,"VM_MEMORY_COREDATA","","",null,null],[17,"VM_MEMORY_COREDATA_OBJECTIDS","","",null,null],[17,"VM_MEMORY_ATS","","",null,null],[17,"VM_MEMORY_LAYERKIT","","",null,null],[17,"VM_MEMORY_CGIMAGE","","",null,null],[17,"VM_MEMORY_TCMALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_DATA","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_SHARED","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_BACKINGSTORES","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_XALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_MISC","","",null,null],[17,"VM_MEMORY_DYLD","","",null,null],[17,"VM_MEMORY_DYLD_MALLOC","","",null,null],[17,"VM_MEMORY_SQLITE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_CORE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","","",null,null],[17,"VM_MEMORY_GLSL","","",null,null],[17,"VM_MEMORY_OPENCL","","",null,null],[17,"VM_MEMORY_COREIMAGE","","",null,null],[17,"VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","","",null,null],[17,"VM_MEMORY_IMAGEIO","","",null,null],[17,"VM_MEMORY_COREPROFILE","","",null,null],[17,"VM_MEMORY_ASSETSD","","",null,null],[17,"VM_MEMORY_OS_ALLOC_ONCE","","",null,null],[17,"VM_MEMORY_LIBDISPATCH","","",null,null],[17,"VM_MEMORY_ACCELERATE","","",null,null],[17,"VM_MEMORY_COREUI","","",null,null],[17,"VM_MEMORY_COREUIFILE","","",null,null],[17,"VM_MEMORY_GENEALOGY","","",null,null],[17,"VM_MEMORY_RAWCAMERA","","",null,null],[17,"VM_MEMORY_CORPSEINFO","","",null,null],[17,"VM_MEMORY_ASL","","",null,null],[17,"VM_MEMORY_SWIFT_RUNTIME","","",null,null],[17,"VM_MEMORY_SWIFT_METADATA","","",null,null],[17,"VM_MEMORY_DHMM","","",null,null],[17,"VM_MEMORY_SCENEKIT","","",null,null],[17,"VM_MEMORY_SKYWALK","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_1","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_16","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_EACCESS","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"B7200","","",null,null],[17,"B14400","","",null,null],[17,"B28800","","",null,null],[17,"B57600","","",null,null],[17,"B76800","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"IPPROTO_HOPOPTS","","IP6 hop-by-hop options",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_GGP","","gateway2 (deprecated)",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_ST","","Stream protocol II.",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PIGP","","private interior gateway",null,null],[17,"IPPROTO_RCCMON","","BBN RCC Monitoring",null,null],[17,"IPPROTO_NVPII","","network voice protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_ARGUS","","Argus",null,null],[17,"IPPROTO_EMCON","","EMCON",null,null],[17,"IPPROTO_XNET","","Cross Net Debugger",null,null],[17,"IPPROTO_CHAOS","","Chaos",null,null],[17,"IPPROTO_MUX","","Multiplexing",null,null],[17,"IPPROTO_MEAS","","DCN Measurement Subsystems",null,null],[17,"IPPROTO_HMP","","Host Monitoring",null,null],[17,"IPPROTO_PRM","","Packet Radio Measurement",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TRUNK1","","Trunk-1",null,null],[17,"IPPROTO_TRUNK2","","Trunk-2",null,null],[17,"IPPROTO_LEAF1","","Leaf-1",null,null],[17,"IPPROTO_LEAF2","","Leaf-2",null,null],[17,"IPPROTO_RDP","","Reliable Data",null,null],[17,"IPPROTO_IRTP","","Reliable Transaction",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_BLT","","Bulk Data Transfer",null,null],[17,"IPPROTO_NSP","","Network Services",null,null],[17,"IPPROTO_INP","","Merit Internodal",null,null],[17,"IPPROTO_SEP","","Sequential Exchange",null,null],[17,"IPPROTO_3PC","","Third Party Connect",null,null],[17,"IPPROTO_IDPR","","InterDomain Policy Routing",null,null],[17,"IPPROTO_XTP","","XTP",null,null],[17,"IPPROTO_DDP","","Datagram Delivery",null,null],[17,"IPPROTO_CMTP","","Control Message Transport",null,null],[17,"IPPROTO_TPXX","","TP++ Transport",null,null],[17,"IPPROTO_IL","","IL transport protocol",null,null],[17,"IPPROTO_SDRP","","Source Demand Routing",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_IDRP","","InterDomain Routing",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_MHRP","","Mobile Host Routing",null,null],[17,"IPPROTO_BHA","","BHA",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_INLSP","","Integ. Net Layer Security",null,null],[17,"IPPROTO_SWIPE","","IP with encryption",null,null],[17,"IPPROTO_NHRP","","Next Hop Resolution",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_AHIP","","any host internal protocol",null,null],[17,"IPPROTO_CFTP","","CFTP",null,null],[17,"IPPROTO_HELLO","","\"hello\" routing protocol",null,null],[17,"IPPROTO_SATEXPAK","","SATNET/Backroom EXPAK",null,null],[17,"IPPROTO_KRYPTOLAN","","Kryptolan",null,null],[17,"IPPROTO_RVD","","Remote Virtual Disk",null,null],[17,"IPPROTO_IPPC","","Pluribus Packet Core",null,null],[17,"IPPROTO_ADFS","","Any distributed FS",null,null],[17,"IPPROTO_SATMON","","Satnet Monitoring",null,null],[17,"IPPROTO_VISA","","VISA Protocol",null,null],[17,"IPPROTO_IPCV","","Packet Core Utility",null,null],[17,"IPPROTO_CPNX","","Comp. Prot. Net. Executive",null,null],[17,"IPPROTO_CPHB","","Comp. Prot. HeartBeat",null,null],[17,"IPPROTO_WSN","","Wang Span Network",null,null],[17,"IPPROTO_PVP","","Packet Video Protocol",null,null],[17,"IPPROTO_BRSATMON","","BackRoom SATNET Monitoring",null,null],[17,"IPPROTO_ND","","Sun net disk proto (temp.)",null,null],[17,"IPPROTO_WBMON","","WIDEBAND Monitoring",null,null],[17,"IPPROTO_WBEXPAK","","WIDEBAND EXPAK",null,null],[17,"IPPROTO_EON","","ISO cnlp",null,null],[17,"IPPROTO_VMTP","","VMTP",null,null],[17,"IPPROTO_SVMTP","","Secure VMTP",null,null],[17,"IPPROTO_VINES","","Banyon VINES",null,null],[17,"IPPROTO_TTP","","TTP",null,null],[17,"IPPROTO_IGP","","NSFNET-IGP",null,null],[17,"IPPROTO_DGP","","dissimilar gateway prot.",null,null],[17,"IPPROTO_TCF","","TCF",null,null],[17,"IPPROTO_IGRP","","Cisco/GXS IGRP",null,null],[17,"IPPROTO_OSPFIGP","","OSPFIGP",null,null],[17,"IPPROTO_SRPC","","Strite RPC protocol",null,null],[17,"IPPROTO_LARP","","Locus Address Resoloution",null,null],[17,"IPPROTO_MTP","","Multicast Transport",null,null],[17,"IPPROTO_AX25","","AX.25 Frames",null,null],[17,"IPPROTO_IPEIP","","IP encapsulated in IP",null,null],[17,"IPPROTO_MICP","","Mobile Int.ing control",null,null],[17,"IPPROTO_SCCSP","","Semaphore Comm. security",null,null],[17,"IPPROTO_ETHERIP","","Ethernet IP encapsulation",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_APES","","any private encr. scheme",null,null],[17,"IPPROTO_GMTP","","GMTP",null,null],[17,"IPPROTO_PIM","","Protocol Independent Mcast",null,null],[17,"IPPROTO_IPCOMP","","payload compression (IPComp)",null,null],[17,"IPPROTO_PGM","","PGM",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_DIVERT","","divert pseudo-protocol",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"IPPROTO_DONE","","last return value of *_input(), meaning \"all job for this pkt is done\".",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_IMPLINK","","",null,null],[17,"AF_PUP","","",null,null],[17,"AF_CHAOS","","",null,null],[17,"AF_NS","","",null,null],[17,"AF_ISO","","",null,null],[17,"AF_OSI","","",null,null],[17,"AF_ECMA","","",null,null],[17,"AF_DATAKIT","","",null,null],[17,"AF_CCITT","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_DLI","","",null,null],[17,"AF_LAT","","",null,null],[17,"AF_HYLINK","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_LINK","","",null,null],[17,"pseudo_AF_XTP","","",null,null],[17,"AF_COIP","","",null,null],[17,"AF_CNT","","",null,null],[17,"pseudo_AF_RTIP","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_SIP","","",null,null],[17,"pseudo_AF_PIP","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_E164","","",null,null],[17,"pseudo_AF_KEY","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NATM","","",null,null],[17,"AF_SYSTEM","","",null,null],[17,"AF_NETBIOS","","",null,null],[17,"AF_PPP","","",null,null],[17,"pseudo_AF_HDRCMPLT","","",null,null],[17,"AF_SYS_CONTROL","","",null,null],[17,"SYSPROTO_EVENT","","",null,null],[17,"SYSPROTO_CONTROL","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_IMPLINK","","",null,null],[17,"PF_PUP","","",null,null],[17,"PF_CHAOS","","",null,null],[17,"PF_NS","","",null,null],[17,"PF_ISO","","",null,null],[17,"PF_OSI","","",null,null],[17,"PF_ECMA","","",null,null],[17,"PF_DATAKIT","","",null,null],[17,"PF_CCITT","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_DLI","","",null,null],[17,"PF_LAT","","",null,null],[17,"PF_HYLINK","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_LINK","","",null,null],[17,"PF_XTP","","",null,null],[17,"PF_COIP","","",null,null],[17,"PF_CNT","","",null,null],[17,"PF_SIP","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_RTIP","","",null,null],[17,"PF_PIP","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_NATM","","",null,null],[17,"PF_SYSTEM","","",null,null],[17,"PF_NETBIOS","","",null,null],[17,"PF_PPP","","",null,null],[17,"NET_RT_DUMP","","",null,null],[17,"NET_RT_FLAGS","","",null,null],[17,"NET_RT_IFLIST","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"SOCK_MAXADDRLEN","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_PKTINFO","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_LOCAL","","",null,null],[17,"LOCAL_PEERCRED","","",null,null],[17,"LOCAL_PEERPID","","",null,null],[17,"LOCAL_PEEREPID","","",null,null],[17,"LOCAL_PEERUUID","","",null,null],[17,"LOCAL_PEEREUUID","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TIMESTAMP_MONOTONIC","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_LABEL","","",null,null],[17,"SO_PEERLABEL","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_REUSESHAREUID","","",null,null],[17,"SO_NOTIFYCONFLICT","","",null,null],[17,"SO_RANDOMPORT","","",null,null],[17,"SO_NP_EXTENSIONS","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOF","","",null,null],[17,"MSG_FLUSH","","",null,null],[17,"MSG_HOLD","","",null,null],[17,"MSG_SEND","","",null,null],[17,"MSG_HAVEMORE","","",null,null],[17,"MSG_RCVMORE","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SCM_CREDS","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_OACTIVE","","",null,null],[17,"IFF_SIMPLEX","","",null,null],[17,"IFF_LINK0","","",null,null],[17,"IFF_LINK1","","",null,null],[17,"IFF_LINK2","","",null,null],[17,"IFF_ALTPHYS","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_DETAIL","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_EXIT_DETAIL_MASK","","",null,null],[17,"NOTE_EXIT_DECRYPTFAIL","","",null,null],[17,"NOTE_EXIT_MEMORY","","",null,null],[17,"NOTE_EXIT_CSERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_LEEWAY","","",null,null],[17,"NOTE_CRITICAL","","",null,null],[17,"NOTE_BACKGROUND","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"NLDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"OFDEL","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"LOG_NETINFO","","",null,null],[17,"LOG_REMOTEAUTH","","",null,null],[17,"LOG_INSTALL","","",null,null],[17,"LOG_RAS","","",null,null],[17,"LOG_LAUNCHD","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_QUAD","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_NOLOCK","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_MASKED","","",null,null],[17,"CTLFLAG_NOAUTO","","",null,null],[17,"CTLFLAG_KERN","","",null,null],[17,"CTLFLAG_LOCKED","","",null,null],[17,"CTLFLAG_OID2","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_MAXID","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_DOMAINNAME","","",null,null],[17,"KERN_MAXPARTITIONS","","",null,null],[17,"KERN_KDEBUG","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK32","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_SYMFILE","","",null,null],[17,"KERN_PROCARGS","","",null,null],[17,"KERN_NETBOOT","","",null,null],[17,"KERN_SYSV","","",null,null],[17,"KERN_AFFINITY","","",null,null],[17,"KERN_TRANSLATE","","",null,null],[17,"KERN_CLASSIC","","",null,null],[17,"KERN_EXEC","","",null,null],[17,"KERN_CLASSICHANDLER","","",null,null],[17,"KERN_AIOMAX","","",null,null],[17,"KERN_AIOPROCMAX","","",null,null],[17,"KERN_AIOTHREADS","","",null,null],[17,"KERN_COREFILE","","",null,null],[17,"KERN_COREDUMP","","",null,null],[17,"KERN_SUGID_COREDUMP","","",null,null],[17,"KERN_PROCDELAYTERM","","",null,null],[17,"KERN_SHREG_PRIVATIZABLE","","",null,null],[17,"KERN_LOW_PRI_WINDOW","","",null,null],[17,"KERN_LOW_PRI_DELAY","","",null,null],[17,"KERN_POSIX","","",null,null],[17,"KERN_USRSTACK64","","",null,null],[17,"KERN_NX_PROTECTION","","",null,null],[17,"KERN_TFP","","",null,null],[17,"KERN_PROCNAME","","",null,null],[17,"KERN_THALTSTACK","","",null,null],[17,"KERN_SPECULATIVE_READS","","",null,null],[17,"KERN_OSVERSION","","",null,null],[17,"KERN_SAFEBOOT","","",null,null],[17,"KERN_RAGEVNODE","","",null,null],[17,"KERN_TTY","","",null,null],[17,"KERN_CHECKOPENEVT","","",null,null],[17,"KERN_THREADNAME","","",null,null],[17,"KERN_MAXID","","",null,null],[17,"KERN_RAGE_PROC","","",null,null],[17,"KERN_RAGE_THREAD","","",null,null],[17,"KERN_UNRAGE_PROC","","",null,null],[17,"KERN_UNRAGE_THREAD","","",null,null],[17,"KERN_OPENEVT_PROC","","",null,null],[17,"KERN_UNOPENEVT_PROC","","",null,null],[17,"KERN_TFP_POLICY","","",null,null],[17,"KERN_TFP_POLICY_DENY","","",null,null],[17,"KERN_TFP_POLICY_DEFAULT","","",null,null],[17,"KERN_KDEFLAGS","","",null,null],[17,"KERN_KDDFLAGS","","",null,null],[17,"KERN_KDENABLE","","",null,null],[17,"KERN_KDSETBUF","","",null,null],[17,"KERN_KDGETBUF","","",null,null],[17,"KERN_KDSETUP","","",null,null],[17,"KERN_KDREMOVE","","",null,null],[17,"KERN_KDSETREG","","",null,null],[17,"KERN_KDGETREG","","",null,null],[17,"KERN_KDREADTR","","",null,null],[17,"KERN_KDPIDTR","","",null,null],[17,"KERN_KDTHRMAP","","",null,null],[17,"KERN_KDPIDEX","","",null,null],[17,"KERN_KDSETRTCDEC","","",null,null],[17,"KERN_KDGETENTROPY","","",null,null],[17,"KERN_KDWRITETR","","",null,null],[17,"KERN_KDWRITEMAP","","",null,null],[17,"KERN_KDENABLE_BG_TRACE","","",null,null],[17,"KERN_KDDISABLE_BG_TRACE","","",null,null],[17,"KERN_KDREADCURTHRMAP","","",null,null],[17,"KERN_KDSET_TYPEFILTER","","",null,null],[17,"KERN_KDBUFWAIT","","",null,null],[17,"KERN_KDCPUMAP","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_LCID","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"KIPC_MBSTAT","","",null,null],[17,"KIPC_NMBCLUSTERS","","",null,null],[17,"KIPC_SOQLIMITCOMPAT","","",null,null],[17,"VM_METER","","",null,null],[17,"VM_LOADAVG","","",null,null],[17,"VM_MACHFACTOR","","",null,null],[17,"VM_SWAPUSAGE","","",null,null],[17,"VM_MAXID","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_EPOCH","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_VECTORUNIT","","",null,null],[17,"HW_BUS_FREQ","","",null,null],[17,"HW_CPU_FREQ","","",null,null],[17,"HW_CACHELINE","","",null,null],[17,"HW_L1ICACHESIZE","","",null,null],[17,"HW_L1DCACHESIZE","","",null,null],[17,"HW_L2SETTINGS","","",null,null],[17,"HW_L2CACHESIZE","","",null,null],[17,"HW_L3SETTINGS","","",null,null],[17,"HW_L3CACHESIZE","","",null,null],[17,"HW_TB_FREQ","","",null,null],[17,"HW_MEMSIZE","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"HW_MAXID","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"USER_MAXID","","",null,null],[17,"CTL_DEBUG_NAME","","",null,null],[17,"CTL_DEBUG_VALUE","","",null,null],[17,"CTL_DEBUG_MAXID","","",null,null],[17,"PRIO_DARWIN_THREAD","","",null,null],[17,"PRIO_DARWIN_PROCESS","","",null,null],[17,"PRIO_DARWIN_BG","","",null,null],[17,"PRIO_DARWIN_NONUI","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"AIO_LISTIO_MAX","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"WEXITED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"XATTR_NOFOLLOW","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"XATTR_NOSECURITY","","",null,null],[17,"XATTR_NODEFAULT","","",null,null],[17,"XATTR_SHOWCOMPRESSION","","",null,null],[17,"NET_RT_IFLIST2","","",null,null],[17,"RTF_UP","","",null,null],[17,"RTF_GATEWAY","","",null,null],[17,"RTF_HOST","","",null,null],[17,"RTF_REJECT","","",null,null],[17,"RTF_DYNAMIC","","",null,null],[17,"RTF_MODIFIED","","",null,null],[17,"RTF_DONE","","",null,null],[17,"RTF_DELCLONE","","",null,null],[17,"RTF_CLONING","","",null,null],[17,"RTF_XRESOLVE","","",null,null],[17,"RTF_LLINFO","","",null,null],[17,"RTF_STATIC","","",null,null],[17,"RTF_BLACKHOLE","","",null,null],[17,"RTF_NOIFREF","","",null,null],[17,"RTF_PROTO2","","",null,null],[17,"RTF_PROTO1","","",null,null],[17,"RTF_PRCLONING","","",null,null],[17,"RTF_WASCLONED","","",null,null],[17,"RTF_PROTO3","","",null,null],[17,"RTF_PINNED","","",null,null],[17,"RTF_LOCAL","","",null,null],[17,"RTF_BROADCAST","","",null,null],[17,"RTF_MULTICAST","","",null,null],[17,"RTF_IFSCOPE","","",null,null],[17,"RTF_CONDEMNED","","",null,null],[17,"RTF_IFREF","","",null,null],[17,"RTF_PROXY","","",null,null],[17,"RTF_ROUTER","","",null,null],[17,"RTM_VERSION","","",null,null],[17,"RTM_ADD","","",null,null],[17,"RTM_DELETE","","",null,null],[17,"RTM_CHANGE","","",null,null],[17,"RTM_GET","","",null,null],[17,"RTM_LOSING","","",null,null],[17,"RTM_REDIRECT","","",null,null],[17,"RTM_MISS","","",null,null],[17,"RTM_LOCK","","",null,null],[17,"RTM_OLDADD","","",null,null],[17,"RTM_OLDDEL","","",null,null],[17,"RTM_RESOLVE","","",null,null],[17,"RTM_NEWADDR","","",null,null],[17,"RTM_DELADDR","","",null,null],[17,"RTM_IFINFO","","",null,null],[17,"RTM_NEWMADDR","","",null,null],[17,"RTM_DELMADDR","","",null,null],[17,"RTM_IFINFO2","","",null,null],[17,"RTM_NEWMADDR2","","",null,null],[17,"RTM_GET2","","",null,null],[17,"RTV_MTU","","",null,null],[17,"RTV_HOPCOUNT","","",null,null],[17,"RTV_EXPIRE","","",null,null],[17,"RTV_RPIPE","","",null,null],[17,"RTV_SPIPE","","",null,null],[17,"RTV_SSTHRESH","","",null,null],[17,"RTV_RTT","","",null,null],[17,"RTV_RTTVAR","","",null,null],[17,"RTA_DST","","",null,null],[17,"RTA_GATEWAY","","",null,null],[17,"RTA_NETMASK","","",null,null],[17,"RTA_GENMASK","","",null,null],[17,"RTA_IFP","","",null,null],[17,"RTA_IFA","","",null,null],[17,"RTA_AUTHOR","","",null,null],[17,"RTA_BRD","","",null,null],[17,"RTAX_DST","","",null,null],[17,"RTAX_GATEWAY","","",null,null],[17,"RTAX_NETMASK","","",null,null],[17,"RTAX_GENMASK","","",null,null],[17,"RTAX_IFP","","",null,null],[17,"RTAX_IFA","","",null,null],[17,"RTAX_AUTHOR","","",null,null],[17,"RTAX_BRD","","",null,null],[17,"RTAX_MAX","","",null,null],[17,"KERN_PROCARGS2","","",null,null],[17,"PROC_PIDTASKALLINFO","","",null,null],[17,"PROC_PIDTASKINFO","","",null,null],[17,"PROC_PIDTHREADINFO","","",null,null],[17,"MAXCOMLEN","","",null,null],[17,"MAXTHREADNAMESIZE","","",null,null],[17,"XUCRED_VERSION","","",null,null],[17,"LC_SEGMENT","","",null,null],[17,"LC_SEGMENT_64","","",null,null],[17,"MH_MAGIC","","",null,null],[17,"MH_MAGIC_64","","",null,null],[17,"UTUN_OPT_FLAGS","","",null,null],[17,"UTUN_OPT_IFNAME","","",null,null],[17,"DLT_NULL","","",null,null],[17,"DLT_EN10MB","","",null,null],[17,"DLT_EN3MB","","",null,null],[17,"DLT_AX25","","",null,null],[17,"DLT_PRONET","","",null,null],[17,"DLT_CHAOS","","",null,null],[17,"DLT_IEEE802","","",null,null],[17,"DLT_ARCNET","","",null,null],[17,"DLT_SLIP","","",null,null],[17,"DLT_PPP","","",null,null],[17,"DLT_FDDI","","",null,null],[17,"DLT_ATM_RFC1483","","",null,null],[17,"DLT_RAW","","",null,null],[17,"DLT_LOOP","","",null,null],[17,"BPF_ALIGNMENT","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_R","","",null,null],[17,"IPC_W","","",null,null],[17,"IPC_M","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHMLBA","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_CONDATTR_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCKATTR_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"aiocb"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"proc_threadinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"sockaddr_ctl"],[3,"in_pktinfo"],[3,"in6_pktinfo"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"timeval32"],[3,"if_data"],[3,"bpf_hdr"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"pthread_rwlockattr_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",2,null]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["nom"] = {"doc":"nom, eating data byte by byte","items":[[4,"CompareResult","nom","indicates wether a comparison was successful, an error, or if more data was needed",null,null],[13,"Ok","","",0,null],[13,"Incomplete","","",0,null],[13,"Error","","",0,null],[4,"ErrorKind","","indicates which parser returned an error",null,null],[13,"Custom","","",1,null],[13,"Tag","","",1,null],[13,"MapRes","","",1,null],[13,"MapOpt","","",1,null],[13,"Alt","","",1,null],[13,"IsNot","","",1,null],[13,"IsA","","",1,null],[13,"SeparatedList","","",1,null],[13,"SeparatedNonEmptyList","","",1,null],[13,"Many0","","",1,null],[13,"Many1","","",1,null],[13,"ManyTill","","",1,null],[13,"Count","","",1,null],[13,"TakeUntilAndConsume","","",1,null],[13,"TakeUntil","","",1,null],[13,"TakeUntilEitherAndConsume","","",1,null],[13,"TakeUntilEither","","",1,null],[13,"LengthValue","","",1,null],[13,"TagClosure","","",1,null],[13,"Alpha","","",1,null],[13,"Digit","","",1,null],[13,"HexDigit","","",1,null],[13,"OctDigit","","",1,null],[13,"AlphaNumeric","","",1,null],[13,"Space","","",1,null],[13,"MultiSpace","","",1,null],[13,"LengthValueFn","","",1,null],[13,"Eof","","",1,null],[13,"ExprOpt","","",1,null],[13,"ExprRes","","",1,null],[13,"CondReduce","","",1,null],[13,"Switch","","",1,null],[13,"TagBits","","",1,null],[13,"OneOf","","",1,null],[13,"NoneOf","","",1,null],[13,"Char","","",1,null],[13,"CrLf","","",1,null],[13,"RegexpMatch","","",1,null],[13,"RegexpMatches","","",1,null],[13,"RegexpFind","","",1,null],[13,"RegexpCapture","","",1,null],[13,"RegexpCaptures","","",1,null],[13,"TakeWhile1","","",1,null],[13,"Complete","","",1,null],[13,"Fix","","",1,null],[13,"Escaped","","",1,null],[13,"EscapedTransform","","",1,null],[13,"TagStr","","",1,null],[13,"IsNotStr","","",1,null],[13,"IsAStr","","",1,null],[13,"TakeWhile1Str","","",1,null],[13,"NonEmpty","","",1,null],[13,"ManyMN","","",1,null],[13,"TakeUntilAndConsumeStr","","",1,null],[13,"TakeUntilStr","","",1,null],[13,"Not","","",1,null],[13,"Permutation","","",1,null],[13,"Verify","","",1,null],[13,"TakeTill1","","",1,null],[13,"TakeUntilAndConsume1","","",1,null],[13,"TakeWhileMN","","",1,null],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",null,null],[13,"Unknown","","needs more data, but we do not know how much",2,null],[13,"Size","","contains the required data size",2,null],[4,"Err","","The `Err` enum indicates the parser was not successful",null,null],[13,"Incomplete","","There was not enough data",3,null],[13,"Error","","The parser had an error (recoverable)",3,null],[13,"Failure","","The parser had an unrecoverable error: we got to the right branch and we know other branches won't work, so backtrack as fast as possible",3,null],[4,"Endianness","","Configurable endianness",null,null],[13,"Big","","",4,null],[13,"Little","","",4,null],[5,"need_more","","",null,{"inputs":[{"name":"i"},{"name":"needed"}],"output":{"name":"iresult"}}],[5,"need_more_err","","",null,{"inputs":[{"name":"i"},{"name":"needed"},{"name":"errorkind"}],"output":{"name":"iresult"}}],[5,"slice_to_offsets","","",null,null],[5,"code_from_offset","","",null,null],[5,"reset_color","","",null,{"inputs":[{"name":"vec"}],"output":null}],[5,"write_color","","",null,{"inputs":[{"name":"vec"},{"name":"u8"}],"output":null}],[5,"print_codes","","",null,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"string"}}],[5,"error_to_u32","","",null,{"inputs":[{"name":"errorkind"}],"output":{"name":"u32"}}],[5,"newline","","Matches a newline character '\\n'",null,null],[5,"tab","","Matches a tab character '\\t'",null,null],[5,"anychar","","matches one byte as a character. Note that the input type will accept a `str`, but not a `&[u8]`, unlike many other nom parsers.",null,{"inputs":[{"name":"t"}],"output":{"generics":["char"],"name":"iresult"}}],[5,"tag_cl","","",null,null],[5,"print","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"begin","","",null,null],[5,"crlf","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"not_line_ending","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"line_ending","","Recognizes an end of line (both '\\n' and '\\r\\n')",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"eol","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"is_alphabetic","","Tests if byte is ASCII alphabetic: A-Z, a-z",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_digit","","Tests if byte is ASCII digit: 0-9",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_hex_digit","","Tests if byte is ASCII hex digit: 0-9, A-F, a-f",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_oct_digit","","Tests if byte is ASCII octal digit: 0-7",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_alphanumeric","","Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_space","","Tests if byte is ASCII space or tab",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"alpha","","Recognizes one or more lowercase and uppercase alphabetic characters: a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"generics":["u32"],"name":"iresult"}}],[5,"alpha0","","Recognizes zero or more lowercase and uppercase alphabetic characters: a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"generics":["u32"],"name":"iresult"}}],[5,"alpha1","","Recognizes one or more lowercase and uppercase alphabetic characters: a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"generics":["u32"],"name":"iresult"}}],[5,"digit","","Recognizes one or more numerical characters: 0-9",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"digit0","","Recognizes zero or more numerical characters: 0-9",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"digit1","","Recognizes one or more numerical characters: 0-9",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"hex_digit","","Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"hex_digit0","","Recognizes zero or more hexadecimal numerical characters: 0-9, A-F, a-f",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"hex_digit1","","Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"oct_digit","","Recognizes one or more octal characters: 0-7",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"oct_digit0","","Recognizes zero or more octal characters: 0-7",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"oct_digit1","","Recognizes one or more octal characters: 0-7",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"alphanumeric","","Recognizes one or more numerical and alphabetic characters: 0-9a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"alphanumeric0","","Recognizes zero or more numerical and alphabetic characters: 0-9a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"alphanumeric1","","Recognizes one or more numerical and alphabetic characters: 0-9a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"space","","Recognizes one or more spaces and tabs",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"space0","","Recognizes zero or more spaces and tabs",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"space1","","Recognizes one or more spaces and tabs",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"multispace","","Recognizes one or more spaces, tabs, carriage returns and line feeds",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"multispace0","","Recognizes zero or more spaces, tabs, carriage returns and line feeds",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"multispace1","","Recognizes one or more spaces, tabs, carriage returns and line feeds",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"sized_buffer","","",null,null],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",null,null],[5,"be_u24","","Recognizes big endian unsigned 3 byte integer",null,null],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",null,null],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",null,null],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",null,null],[5,"be_i24","","Recognizes big endian signed 3 bytes integer",null,null],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",null,null],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",null,null],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",null,null],[5,"le_u24","","Recognizes little endian unsigned 3 byte integer",null,null],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",null,null],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",null,null],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",null,null],[5,"le_i24","","Recognizes little endian signed 3 bytes integer",null,null],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",null,null],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",null,null],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",null,null],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",null,null],[5,"le_f32","","Recognizes little endian 4 bytes floating point number",null,null],[5,"le_f64","","Recognizes little endian 8 bytes floating point number",null,null],[5,"hex_u32","","Recognizes a hex-encoded integer",null,null],[5,"non_empty","","Recognizes non empty buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"rest","","Return the remaining input.",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"rest_s","","Return the remaining input, for strings.",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","str"],"name":"iresult"}}],[5,"recognize_float","","",null,{"inputs":[{"name":"t"}],"output":{"generics":["u32"],"name":"iresult"}}],[5,"float","","Recognizes floating point number in a byte string and returns a f32",null,null],[5,"float_s","","Recognizes floating point number in a string and returns a f32",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","f32"],"name":"iresult"}}],[5,"double","","Recognizes floating point number in a byte string and returns a f64",null,null],[5,"double_s","","Recognizes floating point number in a string and returns a f64",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","f64"],"name":"iresult"}}],[0,"lib","","Lib module to re-export everything needed from `std` or `core`/`alloc`. This is how `serde` does it, albeit there it is not public.",null,null],[0,"std","nom::lib","",null,null],[0,"boxed","nom::lib::std","A pointer type for heap allocation.",null,null],[3,"Box","nom::lib::std::boxed","A pointer type for heap allocation.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",null,null],[16,"Output","","",5,null],[10,"call_box","","",5,null],[3,"PinBox","","A pinned, heap allocated reference.",null,null],[0,"cmp","nom::lib::std","Functionality for ordering and comparison.",null,null],[8,"PartialEq","nom::lib::std::cmp","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",7,null],[13,"Equal","","An ordering where a compared value is equal [to another].",7,null],[13,"Greater","","An ordering where a compared value is greater [than another].",7,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",8,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"max","","Compares and returns the maximum of two values.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","Compares and returns the minimum of two values.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",10,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",10,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",10,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",10,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",10,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compares and returns the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compares and returns the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"collections","nom::lib::std","Collection types.",null,null],[0,"hash_map","nom::lib::std::collections","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[3,"Drain","nom::lib::std::collections::hash_map","A draining iterator over the entries of a `HashMap`.",null,null],[3,"VacantEntry","","A view into a vacant entry in a `HashMap`. It is part of the [`Entry`] enum.",null,null],[3,"RandomState","","`RandomState` is the default state for [`HashMap`] types.",null,null],[3,"DefaultHasher","","The default [`Hasher`] used by [`RandomState`].",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `HashMap`. It is part of the [`Entry`] enum.",null,null],[3,"HashMap","","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[3,"Keys","","An iterator over the keys of a `HashMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `HashMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `HashMap`.",null,null],[3,"Iter","","An iterator over the entries of a `HashMap`.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Occupied","","An occupied entry.",11,null],[13,"Vacant","","A vacant entry.",11,null],[3,"Values","","An iterator over the values of a `HashMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `HashMap`.",null,null],[0,"hash_set","nom::lib::std::collections","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[3,"Drain","nom::lib::std::collections::hash_set","A draining iterator over the items of a `HashSet`.",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `HashSet`s.",null,null],[3,"HashSet","","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[3,"Union","","A lazy iterator producing elements in the union of `HashSet`s.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of `HashSet`s.",null,null],[3,"Iter","","An iterator over the items of a `HashSet`.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of `HashSet`s.",null,null],[3,"IntoIter","","An owning iterator over the items of a `HashSet`.",null,null],[0,"btree_map","nom::lib::std::collections","A map based on a B-Tree.",null,null],[3,"IterMut","nom::lib::std::collections::btree_map","A mutable iterator over the entries of a `BTreeMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",null,null],[3,"Values","","An iterator over the values of a `BTreeMap`.",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",null,null],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",null,null],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant entry.",12,null],[13,"Occupied","","An occupied entry.",12,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",null,null],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",null,null],[4,"CollectionAllocErr","nom::lib::std::collections","Augments `AllocErr` with a CapacityOverflow variant.",null,null],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the collection's maximum (usually `isize::MAX` bytes).",13,null],[13,"AllocErr","","Error due to the allocator (see the `AllocErr` type's docs).",13,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",14,null],[13,"Excluded","","An exclusive bound.",14,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",14,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[0,"btree_set","","A set based on a B-Tree.",null,null],[3,"Intersection","nom::lib::std::collections::btree_set","A lazy iterator producing elements in the intersection of `BTreeSet`s.",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.",null,null],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",null,null],[3,"Union","","A lazy iterator producing elements in the union of `BTreeSet`s.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of `BTreeSet`s.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"Iter","","An iterator over the items of a `BTreeSet`.",null,null],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",null,null],[0,"binary_heap","nom::lib::std::collections","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","nom::lib::std::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest item on a `BinaryHeap`.",null,null],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",null,null],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[0,"vec_deque","nom::lib::std::collections","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"VecDeque","nom::lib::std::collections::vec_deque","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"Iter","","An iterator over the elements of a `VecDeque`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",null,null],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",null,null],[0,"linked_list","nom::lib::std::collections","A doubly-linked list with owned nodes.",null,null],[3,"Iter","nom::lib::std::collections::linked_list","An iterator over the elements of a `LinkedList`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on LinkedList.",null,null],[0,"convert","nom::lib::std","Traits for conversions between types.",null,null],[8,"AsRef","nom::lib::std::convert","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",null,null],[10,"as_ref","","Performs the conversion.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",null,null],[10,"into","","Performs the conversion.",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",null,null],[10,"from","","Performs the conversion.",18,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Error","","The type returned in the event of a conversion error.",19,null],[10,"try_into","","Performs the conversion.",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Error","","The type returned in the event of a conversion error.",20,null],[10,"try_from","","Performs the conversion.",20,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"fmt","nom::lib::std","Utilities for formatting and printing `String`s.",null,null],[5,"format","nom::lib::std::fmt","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",21,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",21,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[6,"Result","","The type returned by formatter methods.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"hash","nom::lib::std","Generic hashing support.",null,null],[8,"Hash","nom::lib::std::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [`Hasher`].",31,null],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",31,null],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",null,null],[10,"finish","","Returns the hash value for the values written so far.",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`.",32,null],[11,"write_u8","","Writes a single `u8` into this hasher.",32,null],[11,"write_u16","","Writes a single `u16` into this hasher.",32,null],[11,"write_u32","","Writes a single `u32` into this hasher.",32,null],[11,"write_u64","","Writes a single `u64` into this hasher.",32,null],[11,"write_u128","","Writes a single `u128` into this hasher.",32,null],[11,"write_usize","","Writes a single `usize` into this hasher.",32,null],[11,"write_i8","","Writes a single `i8` into this hasher.",32,null],[11,"write_i16","","Writes a single `i16` into this hasher.",32,null],[11,"write_i32","","Writes a single `i32` into this hasher.",32,null],[11,"write_i64","","Writes a single `i64` into this hasher.",32,null],[11,"write_i128","","Writes a single `i128` into this hasher.",32,null],[11,"write_isize","","Writes a single `isize` into this hasher.",32,null],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",null,null],[16,"Hasher","","Type of the hasher that will be created.",33,null],[10,"build_hasher","","Creates a new hasher.",33,null],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for types that implement [`Hasher`] and [`Default`].",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[0,"iter","nom::lib::std","Composable external iteration.",null,null],[3,"Rev","nom::lib::std::iter","A double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",null,null],[3,"Flatten","","An iterator that flattens one level of nesting in an iterator of things that can be turned into iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",null,null],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[3,"Once","","An iterator that yields an element exactly once.",null,null],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",34,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"rfind","","Searches for an element of an iterator from the back that satisfies a predicate.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",null,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",36,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[10,"replace_one","","Replaces this step with `1`, returning itself",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"replace_zero","","Replaces this step with `0`, returning itself",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_one","","Adds one to this step, returning the result",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sub_one","","Subtracts one to this step, returning the result",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_usize","","Add an usize, returning None on overflow",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",37,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",38,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"repeat_with","","Creates a new iterator that repeats elements of type `A` endlessly by applying the provided closure, the repeater, `F: FnMut() -> A`.",null,{"inputs":[{"name":"f"}],"output":{"name":"repeatwith"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",39,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",39,null],[10,"into_iter","","Creates an iterator from a value.",39,null],[3,"Empty","","An iterator that yields nothing.",null,null],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",null,null],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",40,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",42,null],[10,"next","","Advances the iterator and returns the next value.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",42,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stepby"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",42,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",42,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"for_each","","Calls a closure on each element of an iterator.",42,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",42,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",42,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",42,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"flatten","","Creates an iterator that flattens nested structure.",42,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",42,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",42,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",42,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",42,null],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",42,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"try_for_each","","An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","An iterator method that applies a function, producing a single, final value.",42,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_map","","Applies function to the elements of iterator and returns the first non-none result.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",42,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",42,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",42,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",42,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",42,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",42,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[3,"RepeatWith","","An iterator that repeats elements of type `A` endlessly by applying the provided closure `F: FnMut() -> A`.",null,null],[0,"mem","nom::lib::std","Basic functions for dealing with memory.",null,null],[5,"forget","nom::lib::std::mem","Leaks a value: takes ownership and \"forgets\" about the value without running its destructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[19,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",null,null],[3,"Pin","","A pinned reference.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","nom::lib::std","Overloadable operators.",null,null],[8,"BitAnd","nom::lib::std::ops","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",43,null],[10,"bitand","","Performs the `&` operation.",43,null],[8,"Shl","","The left shift operator `<<`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ << _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a << b` and `a.shl(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",44,null],[10,"shl","","Performs the `<<` operation.",44,null],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",45,null],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",46,null],[10,"rem","","Performs the `%` operation.",46,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",14,null],[13,"Excluded","","An exclusive bound.",14,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",14,null],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",47,null],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",48,null],[8,"Add","","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",49,null],[10,"add","","Performs the `+` operation.",49,null],[3,"RangeInclusive","","An range bounded inclusively below and above (`start..=end`).",null,null],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",50,null],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",51,null],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",52,null],[8,"Fn","","The version of the call operator that takes an immutable receiver.",null,null],[10,"call","","Performs the call operation.",53,null],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",54,null],[10,"not","","Performs the unary `!` operation.",54,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",null,null],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",55,null],[10,"div","","Performs the `/` operation.",55,null],[3,"Range","","A (half-open) range bounded inclusively below and exclusively above (`start..end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",56,null],[12,"end","","The upper bound of the range (exclusive).",56,null],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",null,null],[10,"drop","","Executes the destructor for this type.",57,null],[8,"RangeBounds","","`RangeBounds` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[10,"start","","Start index bound.",58,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[10,"end","","End index bound.",58,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",58,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",59,null],[16,"Error","","The type of this value when viewed as failed.",59,null],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function.",59,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"from_error","","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent.",59,null],[10,"from_ok","","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.",59,null],[8,"Shr","","The right shift operator `>>`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ >> _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a >> b` and `a.shr(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",60,null],[10,"shr","","Performs the `>>` operation.",60,null],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",61,null],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",62,null],[13,"Complete","","The generator completed with a return value.",62,null],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",63,null],[8,"IndexMut","","Used for indexing operations (`container[index]`) in mutable contexts.",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`) operation.",64,null],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",65,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",66,null],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",67,null],[10,"sub","","Performs the `-` operation.",67,null],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v = 1;`.",null,null],[10,"deref_mut","","Mutably dereferences the value.",68,null],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",69,null],[10,"call_once","","Performs the call operation.",69,null],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",70,null],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",71,null],[10,"mul","","Performs the `*` operation.",71,null],[8,"Index","","Used for indexing operations (`container[index]`) in immutable contexts.",null,null],[16,"Output","","The returned type after indexing.",72,null],[10,"index","","Performs the indexing (`container[index]`) operation.",72,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",73,null],[16,"Return","","The type of value this generator returns.",73,null],[10,"resume","","Resumes the execution of this generator.",73,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",74,null],[10,"neg","","Performs the unary `-` operation.",74,null],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",75,null],[10,"deref","","Dereferences the value.",75,null],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",76,null],[10,"bitxor","","Performs the `^` operation.",76,null],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","Performs the call operation.",77,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",78,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",79,null],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",80,null],[10,"bitor","","Performs the `|` operation.",80,null],[0,"option","nom::lib::std","Optional values.",null,null],[4,"Option","nom::lib::std::option","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",81,null],[13,"Some","","Some value `T`",81,null],[3,"Iter","","An iterator over a reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an [`Option`].",null,null],[3,"NoneError","","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.",null,null],[0,"result","nom::lib::std","Error handling with the `Result` type.",null,null],[4,"Result","nom::lib::std::result","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",null,null],[13,"Ok","","Contains the success value",82,null],[13,"Err","","Contains the error value",82,null],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",null,null],[0,"slice","nom::lib::std","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","nom::lib::std::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",83,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",83,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",83,null],[10,"connect","","",83,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",null,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",84,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",84,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",84,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",84,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",84,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"ExactChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last up to `chunk_size-1` elements will be omitted.",null,null],[5,"from_ref","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",null,null],[3,"ExactChunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[5,"from_ref_mut","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[0,"str","nom::lib::std","Unicode string slices.",null,null],[5,"from_boxed_utf8_unchecked","nom::lib::std::str","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",null,{"inputs":[{"name":"box"}],"output":{"generics":["str"],"name":"box"}}],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",null,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"EncodeUtf16","","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","nom::lib::std::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",85,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",85,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",85,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",85,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",85,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",86,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",86,null],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",86,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",87,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",88,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"Chars","nom::lib::std::str","An iterator over the [`char`]s of a string slice.",null,null],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",89,null],[10,"from_str","","Parses a string `s` to return a value of this type.",89,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[0,"string","nom::lib::std","A UTF-8 encoded, growable string.",null,null],[3,"String","nom::lib::std::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",90,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"vec","nom::lib::std","A contiguous growable array type with heap-allocated contents, written `Vec<T>`.",null,null],[3,"Vec","nom::lib::std::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[0,"prelude","nom::lib::std","",null,null],[0,"v1","nom::lib::std::prelude","The Rust Prelude.",null,null],[0,"v1","nom::lib::std::prelude::v1","The first version of the prelude of The Rust Standard Library.",null,null],[8,"ToOwned","nom::lib::std::prelude::v1::v1","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",91,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",91,null],[11,"clone_into","","Uses borrowed data to replace owned data, usually by cloning.",91,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",90,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",38,null],[3,"Box","","A pointer type for heap allocation.",null,null],[4,"Result","","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",null,null],[13,"Ok","","Contains the success value",82,null],[13,"Err","","Contains the error value",82,null],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","Performs the call operation.",77,null],[4,"Option","","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",81,null],[13,"Some","","Some value `T`",81,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",10,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",10,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",10,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",10,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",10,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",42,null],[10,"next","","Advances the iterator and returns the next value.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",42,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stepby"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",42,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",42,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"for_each","","Calls a closure on each element of an iterator.",42,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",42,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",42,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",42,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"flatten","","Creates an iterator that flattens nested structure.",42,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",42,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",42,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",42,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",42,null],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",42,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"try_for_each","","An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","An iterator method that applies a function, producing a single, final value.",42,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_map","","Applies function to the elements of iterator and returns the first non-none result.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",42,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",42,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",42,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",42,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",42,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",42,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[3,"String","","A UTF-8 encoded, growable string.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Fn","","The version of the call operator that takes an immutable receiver.",null,null],[10,"call","","Performs the call operation.",53,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[5,"drop","","Disposes of a value.",null,null],[8,"PartialEq","","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"SliceConcatExt","","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",83,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",83,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",83,null],[10,"connect","","",83,null],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",null,null],[10,"drop","","Executes the destructor for this type.",57,null],[8,"AsRef","","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",null,null],[10,"as_ref","","Performs the conversion.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",92,{"inputs":[],"output":{"name":"self"}}],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",69,null],[10,"call_once","","Performs the call operation.",69,null],[8,"Clone","","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",93,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",93,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"rfind","","Searches for an element of an iterator from the back that satisfies a predicate.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"max","","Compares and returns the maximum of two values.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","Compares and returns the minimum of two values.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[3,"Vec","","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",null,null],[10,"from","","Performs the conversion.",18,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",39,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",39,null],[10,"into_iter","","Creates an iterator from a value.",39,null],[8,"Sync","","Types for which it is safe to share references between threads.",null,null],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",null,null],[10,"into","","Performs the conversion.",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","nom","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_error_kind","","Convert Err into an ErrorKind.",1,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"convert","","",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[0,"simple_errors","","Error management",null,null],[4,"Context","nom::simple_errors","",null,null],[13,"Code","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"bool"}}],[11,"convert","","",94,{"inputs":[{"name":"context"}],"output":{"name":"self"}}],[11,"into_error_kind","","Convert Err into ErrorKind.",94,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","nom","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"needed"}}],[11,"is_known","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"needed"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"err"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"err"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"err"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"convert","","",3,{"inputs":[{"name":"err"}],"output":{"name":"self"}}],[11,"into_error_kind","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"is_incomplete","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"compareresult"}],"output":{"name":"bool"}}],[0,"methods","","Method macro combinators",null,null],[0,"bits","","Bit level parsers and combinators",null,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"endianness"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"endianness"}}],[0,"whitespace","","Support for whitespace delimited formats",null,null],[5,"sp","nom::whitespace","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[0,"types","nom","Custom input types",null,null],[3,"CompleteStr","nom::types","Holds a complete String, for which the `at_eof` method always returns true",null,null],[12,"0","","",95,null],[3,"CompleteByteSlice","","Holds a complete byte array, for which the `at_eof` method always returns true",null,null],[12,"0","","",96,null],[3,"Input","","",null,null],[12,"inner","","",97,null],[12,"at_eof","","",97,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"completestr"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"completestr"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"completestr"}],"output":{"name":"bool"}}],[11,"hash","","",95,null],[11,"from","","",95,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",95,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",95,null],[11,"at_eof","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"slice","","",95,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"self"}}],[11,"slice","","",95,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"self"}}],[11,"slice","","",95,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"self"}}],[11,"slice","","",95,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"self"}}],[11,"iter_indices","","",95,null],[11,"iter_elements","","",95,null],[11,"position","","",95,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"slice_index","","",95,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"take","","",95,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"take_split","","",95,null],[11,"input_len","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"compare","","",95,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"compareresult"}}],[11,"compare_no_case","","",95,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"compareresult"}}],[11,"find_substring","","",95,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[11,"find_token","","",95,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"find_token","","",95,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"find_token","","",95,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"parse_to","","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","",95,{"inputs":[{"name":"self"},{"name":"completestr"}],"output":{"name":"usize"}}],[11,"as_bytes","","",95,null],[11,"new_builder","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"extend_into","","",95,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"completebyteslice"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"completebyteslice"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"completebyteslice"}],"output":{"name":"bool"}}],[11,"hash","","",96,null],[11,"from","","",96,null],[11,"from","","",96,null],[11,"deref","","",96,null],[11,"at_eof","","",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"slice","","",96,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"self"}}],[11,"slice","","",96,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"self"}}],[11,"slice","","",96,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"self"}}],[11,"slice","","",96,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"self"}}],[11,"iter_indices","","",96,null],[11,"iter_elements","","",96,null],[11,"position","","",96,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"slice_index","","",96,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"take","","",96,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"take_split","","",96,null],[11,"input_len","","",96,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"compare","","",96,null],[11,"compare_no_case","","",96,null],[11,"compare","","",96,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"compareresult"}}],[11,"compare_no_case","","",96,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"compareresult"}}],[11,"find_substring","","",96,null],[11,"find_substring","","",96,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[11,"find_token","","",96,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"find_token","","",96,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"find_token","","",96,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"parse_to","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","",96,{"inputs":[{"name":"self"},{"name":"completebyteslice"}],"output":{"name":"usize"}}],[11,"as_bytes","","",96,null],[11,"to_hex","","",96,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"to_hex_from","","",96,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"hash","","",97,null],[11,"at_eof","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"slice","","",97,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"self"}}],[11,"slice","","",97,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"self"}}],[11,"slice","","",97,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"self"}}],[11,"slice","","",97,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"self"}}],[11,"iter_indices","","",97,null],[11,"iter_elements","","",97,null],[11,"position","","",97,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"slice_index","","",97,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"take","","",97,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"take_split","","",97,null],[11,"input_len","","",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"compare","","",97,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"compareresult"}}],[11,"compare_no_case","","",97,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"compareresult"}}],[11,"find_substring","","",97,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[11,"find_token","","",97,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"find_token","","",97,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"find_token","","",97,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"parse_to","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","",97,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"usize"}}],[11,"as_bytes","","",97,null],[6,"IResult","nom","Holds the result of parsing functions",null,null],[8,"InputLength","","abstract method to calculate the input length",null,null],[10,"input_len","","calculates the input length, as indicated by its name, and the name of the trait itself",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"Offset","","useful functions to calculate the offset between slices and show a hexdump of a slice",null,null],[10,"offset","","offset between the first byte of self and the first byte of the argument",99,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[8,"AsBytes","","casts the input type to a byte slice",null,null],[10,"as_bytes","","",100,null],[8,"AsChar","","transforms common types to a char for basic token parsing",null,null],[10,"as_char","","makes a char from self",101,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[10,"is_alpha","","tests that self is an alphabetic character",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_alphanum","","tests that self is an alphabetic character or a decimal digit",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_dec_digit","","tests that self is a decimal digit",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_hex_digit","","tests that self is an hex digit",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_oct_digit","","tests that self is an octal digit",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"len","","gets the len in bytes for self",101,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"InputIter","","abstracts common iteration operations on the input type",null,null],[16,"Item","","",102,null],[16,"RawItem","","",102,null],[16,"Iter","","",102,null],[16,"IterElem","","",102,null],[10,"iter_indices","","returns an iterator over the elements and their byte offsets",102,null],[10,"iter_elements","","returns an iterator over the elements",102,null],[10,"position","","finds the byte position of the element",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[10,"slice_index","","get the byte offset from the element's position in the stream",102,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[8,"InputTake","","abstracts slicing operations",null,null],[10,"take","","returns a slice of `count` bytes. panics if count > length",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[10,"take_split","","split the stream at the `count` byte offset. panics if count > length",103,null],[8,"UnspecializedInput","","Dummy trait used for default implementations (currently only used for `InputTakeAtPosition`).",null,null],[8,"InputTakeAtPosition","","methods to take as much input as possible until the provided function returns true for the current element",null,null],[16,"Item","","",104,null],[10,"split_at_position","","",104,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["u32"],"name":"iresult"}}],[10,"split_at_position1","","",104,{"inputs":[{"name":"self"},{"name":"p"},{"generics":["u32"],"name":"errorkind"}],"output":{"generics":["u32"],"name":"iresult"}}],[8,"Compare","","abstracts comparison operations",null,null],[10,"compare","","compares self to another value for equality",105,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"compareresult"}}],[10,"compare_no_case","","compares self to another value for equality independently of the case.",105,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"compareresult"}}],[8,"FindToken","","look for self in the given input stream",null,null],[10,"find_token","","",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[8,"FindSubstring","","look for a substring in self",null,null],[10,"find_substring","","",107,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["usize"],"name":"option"}}],[8,"ParseTo","","used to integrate str's parse() method",null,null],[10,"parse_to","","",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Slice","","slicing operations using ranges",null,null],[10,"slice","","",109,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"self"}}],[8,"AtEof","","indicates whether more data can come later in input",null,null],[10,"at_eof","","",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"ExtendInto","","abtracts something which can extend an `Extend`",null,null],[16,"Item","","",111,null],[16,"Extender","","",111,null],[10,"new_builder","","create a new `Extend` of the correct type",111,null],[10,"extend_into","","accumulate the input into an accumulator",111,null],[8,"HexDisplay","","",null,null],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned string.",112,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned string.",112,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"string"}}],[8,"Convert","","",null,null],[10,"convert","","",113,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[14,"dbg","","Prints a message if the parser fails",null,null],[14,"dbg_dmp","","Prints a message and the input if the parser fails",null,null],[14,"fix_error","","translate parser result from IResult<I,O,u32> to IResult<I,O,E> with a custom type",null,null],[14,"flat_map","","`flat_map!(R -> IResult<R,S>, S -> IResult<S,T>) => R -> IResult<R, T>`",null,null],[14,"error_position","","creates a parse error from a `nom::ErrorKind` and the position in the input if \"verbose-errors\" is not activated, it default to only the error code",null,null],[14,"error_node_position","","creates a parse error from a `nom::ErrorKind`, the position in the input and the next error in the parsing tree. if \"verbose-errors\" is not activated, it default to only the error code",null,null],[14,"closure","","Wraps a parser in a closure",null,null],[14,"named","","Makes a function from a parser combination",null,null],[14,"named_args","","Makes a function from a parser combination with arguments.",null,null],[14,"named_attr","","Makes a function from a parser combination, with attributes",null,null],[14,"call","","Used to wrap common expressions and function as macros",null,null],[14,"apply","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",null,null],[14,"return_error","","Prevents backtracking if the child parser fails",null,null],[14,"add_return_error","","Add an error if the child parser fails",null,null],[14,"complete","","replaces a `Incomplete` returned by the child parser with an `Error`",null,null],[14,"try_parse","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Ok`, and will do an early return for the `Err` side.",null,null],[14,"map","","`map!(I -> IResult<I,O>, O -> P) => I -> IResult<I, P>` maps a function on the result of a parser",null,null],[14,"map_res","","`map_res!(I -> IResult<I,O>, O -> Result<P>) => I -> IResult<I, P>` maps a function returning a Result on the output of a parser",null,null],[14,"map_opt","","`map_opt!(I -> IResult<I,O>, O -> Option<P>) => I -> IResult<I, P>` maps a function returning an Option on the output of a parser",null,null],[14,"parse_to","","`parse_to!(O) => I -> IResult<I, O>` uses the `parse` method from `std::str::FromStr` to convert the current input to the specified type",null,null],[14,"verify","","`verify!(I -> IResult<I,O>, O -> bool) => I -> IResult<I, O>` returns the result of the child parser if it satisfies a verification function",null,null],[14,"value","","`value!(T, R -> IResult<R, S> ) => R -> IResult<R, T>`",null,null],[14,"expr_res","","`expr_res!(Result<E,O>) => I -> IResult<I, O>` evaluate an expression that returns a Result<T,E> and returns a Ok((I,T)) if Ok",null,null],[14,"expr_opt","","`expr_opt!(Option<O>) => I -> IResult<I, O>` evaluate an expression that returns a Option and returns a Ok((I,T)) if Some",null,null],[14,"opt","","`opt!(I -> IResult<I,O>) => I -> IResult<I, Option<O>>` make the underlying parser optional",null,null],[14,"opt_res","","`opt_res!(I -> IResult<I,O>) => I -> IResult<I, Result<nom::Err,O>>` make the underlying parser optional",null,null],[14,"cond_with_error","","`cond_with_error!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",null,null],[14,"cond","","`cond!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",null,null],[14,"cond_reduce","","`cond_reduce!(bool, I -> IResult<I,O>) => I -> IResult<I, O>` Conditional combinator with error",null,null],[14,"peek","","`peek!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result without consuming the input",null,null],[14,"not","","`not!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result only if the embedded parser returns Error or Err(Err::Incomplete) does not consume the input",null,null],[14,"tap","","`tap!(name: I -> IResult<I,O> => { block }) => I -> IResult<I, O>` allows access to the parser's result without affecting it",null,null],[14,"eof","","`eof!()` returns its input if it is at the end of input data",null,null],[14,"exact","","`exact!()` will fail if the child parser does not consume the whole data",null,null],[14,"recognize","","`recognize!(I -> IResult<I, O> ) => I -> IResult<I, I>` if the child parser was successful, return the consumed input as produced value",null,null],[14,"alt","","Try a list of parsers and return the result of the first successful one",null,null],[14,"alt_complete","","Is equivalent to the `alt!` combinator, except that it will not return `Incomplete` when one of the constituting parsers returns `Incomplete`. Instead, it will try the next alternative in the chain.",null,null],[14,"switch","","`switch!(I -> IResult<I,P>, P => I -> IResult<I,O> | ... | P => I -> IResult<I,O> ) => I -> IResult<I, O>` choose the next parser depending on the result of the first one, if successful, and returns the result of the second parser",null,null],[14,"permutation","","`permutation!(I -> IResult<I,A>, I -> IResult<I,B>, ... I -> IResult<I,X> ) => I -> IResult<I, (A,B,...X)>` applies its sub parsers in a sequence, but independent from their order this parser will only succeed if all of its sub parsers succeed",null,null],[14,"tuple","","`tuple!(I->IResult<I,A>, I->IResult<I,B>, ... I->IResult<I,X>) => I -> IResult<I, (A, B, ..., X)>` chains parsers and assemble the sub results in a tuple.",null,null],[14,"pair","","`pair!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` pair(X,Y), returns (x,y)",null,null],[14,"separated_pair","","`separated_pair!(I -> IResult<I,O>, I -> IResult<I, T>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` separated_pair(X,sep,Y) returns (x,y)",null,null],[14,"preceded","","`preceded!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, O>` preceded(opening, X) returns X",null,null],[14,"terminated","","`terminated!(I -> IResult<I,O>, I -> IResult<I,T>) => I -> IResult<I, O>` terminated(X, closing) returns X",null,null],[14,"delimited","","`delimited!(I -> IResult<I,T>, I -> IResult<I,O>, I -> IResult<I,U>) => I -> IResult<I, O>` delimited(opening, X, closing) returns X",null,null],[14,"do_parse","","`do_parse!(I->IResult<I,A> >> I->IResult<I,B> >> ... I->IResult<I,X> , ( O ) ) => I -> IResult<I, O>` do_parse applies sub parsers in a sequence. it can store intermediary results and make them available for later parsers",null,null],[14,"separated_list","","`separated_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_list(sep, X) returns Vec will return Incomplete if there may be more elements",null,null],[14,"separated_nonempty_list","","`separated_nonempty_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_nonempty_list(sep, X) returns Vec will return Incomplete if there may be more elements",null,null],[14,"separated_list_complete","","`separated_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",null,null],[14,"separated_nonempty_list_complete","","`separated_nonempty_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_nonempty_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",null,null],[14,"many0","","`many0!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 0 or more times and returns the list of results in a Vec.",null,null],[14,"many1","","`many1!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 1 or more times and returns the list of results in a Vec",null,null],[14,"many_till","","`many_till!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (Vec<O>, P)>` Applies the first parser until the second applies. Returns a tuple containing the list of results from the first in a Vec and the result of the second.",null,null],[14,"many_m_n","","`many_m_n!(usize, usize, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser between m and n times (n included) and returns the list of results in a Vec",null,null],[14,"count","","`count!(I -> IResult<I,O>, nb) => I -> IResult<I, Vec<O>>` Applies the child parser a specified number of times",null,null],[14,"count_fixed","","`count_fixed!(O, I -> IResult<I,O>, nb) => I -> IResult<I, [O; nb]>` Applies the child parser a fixed number of times and returns a fixed size array The type must be specified and it must be `Copy`",null,null],[14,"length_count","","`length_count!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` gets a number from the first parser, then applies the second parser that many times",null,null],[14,"length_data","","`length_data!(I -> IResult<I, nb>) => O`",null,null],[14,"length_value","","`length_value!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, O>`",null,null],[14,"fold_many0","","`fold_many0!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 0 or more times and folds the list of return values",null,null],[14,"fold_many1","","`fold_many1!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 1 or more times and folds the list of return values",null,null],[14,"fold_many_m_n","","`fold_many_m_n!(usize, usize, I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser between m and n times (n included) and folds the list of return value",null,null],[14,"method","","Makes a method from a parser combination",null,null],[14,"call_m","","Used to called methods then move self back into self",null,null],[14,"apply_m","","emulate function currying for method calls on structs `apply_m!(self.my_function, arg1, arg2, ...)` becomes `self.my_function(input, arg1, arg2, ...)`",null,null],[14,"tag","","`tag!(&[T]: nom::AsBytes) => &[T] -> IResult<&[T], &[T]>` declares a byte array as a suite to recognize",null,null],[14,"tag_no_case","","`tag_no_case!(&[T]) => &[T] -> IResult<&[T], &[T]>` declares a case insensitive ascii string as a suite to recognize",null,null],[14,"is_not","","`is_not!(&[T:AsBytes]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that do not appear in the provided array",null,null],[14,"is_a","","`is_a!(&[T]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that appear in the provided array",null,null],[14,"escaped","","`escaped!(T -> IResult<T, T>, U, T -> IResult<T, T>) => T -> IResult<T, T> where T: InputIter, U: AsChar` matches a byte string with escaped characters.",null,null],[14,"escaped_transform","","`escaped_transform!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], Vec<T>>` matches a byte string with escaped characters.",null,null],[14,"take_while","","`take_while!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function fails.",null,null],[14,"take_while1","","`take_while1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest (non empty) list of bytes until the provided function fails.",null,null],[14,"take_while_m_n","","`take_while_m_n!(m: usize, n: usize, T -> bool) => &[T] -> IResult<&[T], &[T]>` returns a list of bytes or characters for which the provided function returns true. the returned list's size will be at least m, and at most n",null,null],[14,"take_till","","`take_till!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function succeeds",null,null],[14,"take_till1","","`take_till1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest non empty list of bytes until the provided function succeeds",null,null],[14,"take","","`take!(nb) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming the specified number of bytes",null,null],[14,"take_str","","`take_str!(nb) => &[T] -> IResult<&[T], &str>` same as take! but returning a &str",null,null],[14,"take_until_and_consume","","`take_until_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes until the specified byte sequence is found, and consumes it",null,null],[14,"take_until_and_consume1","","`take_until_and_consume1!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes (at least 1) until the specified byte sequence is found, and consumes it",null,null],[14,"take_until","","`take_until!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds the specified tag.",null,null],[14,"take_until1","","`take_until1!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data (at least one byte) until it finds the specified tag",null,null],[14,"take_until_either_and_consume","","`take_until_either_and_consume!(chars) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds any of the specified characters, and consume it",null,null],[14,"take_until_either_and_consume1","","`take_until_either_and_consume1!(chars) => &[T] -> IResult<&[T], &[T]>` consumes data (at least one byte) until it finds any of the specified characters, and consume it",null,null],[14,"take_until_either","","`take_until_either!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds any of the specified characters",null,null],[14,"take_until_either1","","`take_until_either1!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data (at least one byte) until it finds any of the specified characters",null,null],[14,"length_bytes","","`length_bytes!(&[T] -> IResult<&[T], nb>) => &[T] -> IResult<&[T], &[T]>` Gets a number from the first parser, then extracts that many bytes from the remaining stream",null,null],[14,"bits","","Transforms its byte slice input into a bit stream for the underlying parser. This allows the given bit stream parser to work on a byte slice input.",null,null],[14,"bytes","","Counterpart to bits, bytes! transforms its bit stream input into a byte slice for the underlying parser, allowing byte-slice parsers to work on bit streams.",null,null],[14,"take_bits","","Consumes the specified number of bits and returns them as the specified type.",null,null],[14,"tag_bits","","Matches the given bit pattern.",null,null],[14,"one_of","","matches one of the provided characters",null,null],[14,"none_of","","matches anything but the provided characters",null,null],[14,"char","","matches one character: `char!(char) => &[u8] -> IResult<&[u8], char>",null,null],[14,"u16","","if the parameter is nom::Endianness::Big, parse a big endian u16 integer, otherwise a little endian u16 integer",null,null],[14,"u32","","if the parameter is nom::Endianness::Big, parse a big endian u32 integer, otherwise a little endian u32 integer",null,null],[14,"u64","","if the parameter is nom::Endianness::Big, parse a big endian u64 integer, otherwise a little endian u64 integer",null,null],[14,"i16","","if the parameter is nom::Endianness::Big, parse a big endian i16 integer, otherwise a little endian i16 integer",null,null],[14,"i32","","if the parameter is nom::Endianness::Big, parse a big endian i32 integer, otherwise a little endian i32 integer",null,null],[14,"i64","","if the parameter is nom::Endianness::Big, parse a big endian i64 integer, otherwise a little endian i64 integer",null,null],[14,"wrap_sep","","",null,null],[14,"eat_separator","","helper macros to build a separator parser",null,null],[14,"sep","","sep is the parser rewriting macro for whitespace separated formats",null,null],[14,"ws","","`ws!(I -> IResult<I,O>) => I -> IResult<I, O>`",null,null],[14,"tag_s","","`tag_s!(&str) => &str -> IResult<&str, &str>` declares a string as a suite to recognize",null,null],[14,"tag_no_case_s","","`tag_no_case_s!(&str) => &str -> IResult<&str, &str>` declares a case-insensitive string as a suite to recognize",null,null],[14,"take_s","","`take_s!(nb) => &str -> IResult<&str, &str>` generates a parser consuming the specified number of characters",null,null],[14,"is_not_s","","`is_not_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that do not appear in the provided array",null,null],[14,"is_a_s","","`is_a_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that appear in the provided array",null,null],[14,"take_while_s","","`take_while_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function fails.",null,null],[14,"take_while1_s","","`take_while1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest (non empty) list of characters until the provided function fails.",null,null],[14,"take_till_s","","`take_till_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function succeeds",null,null],[14,"take_till1_s","","`take_till1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest non empty list of characters until the provided function succeeds",null,null],[14,"take_until_and_consume_s","","`take_until_and_consume_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and consumes it",null,null],[14,"take_until_s","","`take_until_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and leaves it in the remaining input",null,null],[11,"new","nom::lib::std::prelude::v1::v1","Allocates memory on the heap and then places `x` into it.",114,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",114,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",114,null],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.",114,{"inputs":[{"name":"box"}],"output":{"name":"nonnull"}}],[11,"leak","","Consumes and leaks the `Box`, returning a mutable reference, `&'a mut T`. Here, the lifetime `'a` may be chosen to be `'static`.",114,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",114,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",114,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"read","","",114,null],[11,"initializer","","",114,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","",114,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","",114,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","",114,null],[11,"as_ref","","",115,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",115,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"to_socket_addrs","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter","error"],"name":"result"}}],[11,"default","nom::lib::std::collections::hash_set","Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.",116,{"inputs":[],"output":{"name":"hashset"}}],[11,"default","nom::lib::std::prelude::v1::v1","",114,{"inputs":[],"output":{"generics":["cstr"],"name":"box"}}],[11,"default","","",114,{"inputs":[],"output":{"generics":["osstr"],"name":"box"}}],[11,"default","nom::lib::std::collections::hash_map","Creates a new `DefaultHasher` using [`new`]. See its documentation for more.",117,{"inputs":[],"output":{"name":"defaulthasher"}}],[11,"default","","Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.",118,{"inputs":[],"output":{"name":"hashmap"}}],[11,"default","","Constructs a new `RandomState`.",119,{"inputs":[],"output":{"name":"randomstate"}}],[11,"write","","",117,null],[11,"finish","","",117,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_iter","","",118,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"from_iter","nom::lib::std::collections::hash_set","",116,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"next","","",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next","","",121,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next","","",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next","nom::lib::std::collections::hash_map","",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next","","",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next","nom::lib::std::collections::hash_set","",125,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next","nom::lib::std::collections::hash_map","",126,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next","","",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next","nom::lib::std::collections::hash_set","",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"next","nom::lib::std::collections::hash_map","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"next","nom::lib::std::collections::hash_set","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"next","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"next","nom::lib::std::collections::hash_map","",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"fill_buf","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"consume","","",114,null],[11,"read_until","","",114,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_line","","",114,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::hash_map","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::hash_set","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::hash_map","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::hash_set","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::hash_map","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::hash_set","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::hash_map","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::hash_set","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::hash_map","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::hash_set","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"seek","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64","error"],"name":"result"}}],[11,"write","","",136,null],[11,"write_all","","",136,null],[11,"flush","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","",114,null],[11,"flush","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","",114,null],[11,"write_fmt","","",114,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"len","nom::lib::std::collections::hash_map","",123,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",133,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","nom::lib::std::collections::hash_set","",131,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",122,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","nom::lib::std::collections::hash_map","",126,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","nom::lib::std::collections::hash_set","",132,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","nom::lib::std::collections::hash_map","",127,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",130,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",128,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",124,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"osstr"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","","",136,{"inputs":[{"name":"cstring"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",114,{"inputs":[{"name":"string"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"e"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"cstring"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"string"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"e"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"osstring"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"cstr"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"eq","nom::lib::std::collections::hash_map","",118,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::collections::hash_set","",116,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"extend","nom::lib::std::collections::hash_map","",118,null],[11,"extend","","",118,null],[11,"extend","nom::lib::std::collections::hash_set","",116,null],[11,"extend","","",116,null],[11,"description","nom::lib::std::str","",137,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","nom::lib::std::string","",138,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",139,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","nom::lib::std::fmt","",140,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","nom::lib::std::str","",141,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","nom::lib::std::string","",142,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"report","","",82,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"report","","",82,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_iter","nom::lib::std::collections::hash_set","Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.",116,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","nom::lib::std::collections::hash_map","Creates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.",118,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"index","","Returns a reference to the value corresponding to the supplied key.",118,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"build_hasher","","",119,{"inputs":[{"name":"self"}],"output":{"name":"defaulthasher"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","nom::lib::std::collections::hash_set","",125,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"clone","nom::lib::std::collections::hash_map","",119,{"inputs":[{"name":"self"}],"output":{"name":"randomstate"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"clone","nom::lib::std::collections::hash_set","",116,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"clone","nom::lib::std::collections::hash_map","",117,{"inputs":[{"name":"self"}],"output":{"name":"defaulthasher"}}],[11,"clone","nom::lib::std::collections::hash_set","",129,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","nom::lib::std::collections::hash_map","",126,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"into_iter","nom::lib::std::prelude::v1::v1","Returns a consuming iterator over the possibly contained value.",81,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",82,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"start","nom::lib::std::ops","",143,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",143,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",143,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",143,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",144,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",144,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"next","nom::lib::std::slice","",145,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",145,null],[11,"count","","",145,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",145,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",145,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",145,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",145,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"position","","",145,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",145,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","nom::lib::std::iter","",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",146,null],[11,"try_fold","","",146,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",146,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",147,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",147,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",147,null],[11,"try_fold","","",147,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",147,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","nom::lib::std::slice","",148,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"count","","",148,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",148,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",148,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::str","",149,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","nom::lib::std::slice","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",150,null],[11,"count","","",150,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",150,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::str","",151,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",151,null],[11,"count","","",151,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",151,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",151,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"all","","",151,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",151,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",151,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","",151,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",151,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","nom::lib::std::option","",152,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",152,null],[11,"next","nom::lib::std::iter","",153,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",153,null],[11,"try_fold","","",153,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",153,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",147,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",147,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",147,null],[11,"try_fold","","",147,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",147,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","nom::lib::std::str","",154,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::iter","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",155,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",155,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",155,null],[11,"try_fold","","",155,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",155,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",156,null],[11,"try_fold","","",156,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",156,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","nom::lib::std::slice","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"count","","",157,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",157,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::iter","",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",158,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",158,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",158,null],[11,"try_fold","","",158,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",158,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","nom::lib::std::str","",159,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","nom::lib::std::option","",160,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",160,null],[11,"next","","",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",161,null],[11,"next","nom::lib::std::iter","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",162,null],[11,"next","","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",163,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",163,null],[11,"try_fold","","",163,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","nom::lib::std::str","",164,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"size_hint","","",164,null],[11,"next","nom::lib::std::slice","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",165,null],[11,"next","","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",166,null],[11,"next","nom::lib::std::iter","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",167,null],[11,"try_fold","","",167,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"r"}}],[11,"fold","","",167,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",168,null],[11,"try_fold","","",168,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",168,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",169,null],[11,"try_fold","","",169,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",169,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","nom::lib::std::slice","",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",170,null],[11,"next","","",171,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",171,null],[11,"next","nom::lib::std::ops","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"nth","","",79,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::iter","",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",172,null],[11,"nth","","",172,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::slice","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",173,null],[11,"next","nom::lib::std::str","",174,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",175,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",175,null],[11,"next","nom::lib::std::slice","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",176,null],[11,"count","","",176,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",176,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",177,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",177,null],[11,"next","nom::lib::std::iter","",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",178,null],[11,"next","nom::lib::std::str","",179,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",179,null],[11,"next","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",181,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"count","","",181,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",181,null],[11,"last","","",181,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","nom::lib::std::slice","",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",182,null],[11,"next","nom::lib::std::iter","",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",183,null],[11,"try_fold","","",183,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","","Overflow Behavior",184,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",184,null],[11,"nth","","",184,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",184,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",184,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",184,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","nom::lib::std::result","",185,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",185,null],[11,"next","nom::lib::std::iter","",186,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",186,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",186,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",186,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"nth","","",186,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",186,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",186,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",186,null],[11,"next","nom::lib::std::slice","",187,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",187,null],[11,"next","nom::lib::std::str","",188,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","nom::lib::std::iter","",189,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",189,null],[11,"try_fold","","",189,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",189,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"find","","",189,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","",189,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","nom::lib::std::str","",190,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",190,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",190,null],[11,"last","","",190,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::iter","",191,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",191,null],[11,"count","","",191,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",191,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",191,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","nom::lib::std::slice","",192,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",192,null],[11,"count","","",192,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",192,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",192,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",192,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",192,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"position","","",192,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",192,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","nom::lib::std::result","",193,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",193,null],[11,"next","nom::lib::std::str","",194,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","nom::lib::std::slice","",195,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",195,null],[11,"count","","",195,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",195,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::iter","",196,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",196,null],[11,"try_fold","","",196,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",196,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","nom::lib::std::str","",197,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",198,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","nom::lib::std::ops","",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"nth","","",56,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::iter","",199,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",199,null],[11,"next","nom::lib::std::str","",200,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","nom::lib::std::iter","",201,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",201,null],[11,"try_fold","","",201,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","","",202,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",202,null],[11,"next","","",203,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",203,null],[11,"nth","","",203,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::result","",204,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",204,null],[11,"next","nom::lib::std::str","",205,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","nom::lib::std::ops","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"nth","","",143,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",143,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"next","nom::lib::std::iter","",206,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",206,null],[11,"from","nom::lib::std::prelude::v1::v1","",81,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from","nom::lib::std::collections","",13,{"inputs":[{"name":"allocerr"}],"output":{"name":"collectionallocerr"}}],[11,"write_str","nom::lib::std::fmt","",207,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",207,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","",207,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_ref","nom::lib::std::slice","",145,null],[11,"product","nom::lib::std::prelude::v1::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the product of all elements is returned.",82,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"build_hasher","nom::lib::std::hash","",208,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[11,"clone","nom::lib::std::option","",161,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","nom::lib::std::ops","",14,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","nom::lib::std::str::pattern","",86,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","nom::lib::std::result","",204,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","nom::lib::std::iter","",206,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"clone","nom::lib::std::str","",181,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","nom::lib::std::ops","",78,{"inputs":[{"name":"self"}],"output":{"name":"rangetoinclusive"}}],[11,"clone","nom::lib::std::hash","",209,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"clone","nom::lib::std::iter","",162,{"inputs":[{"name":"self"}],"output":{"name":"repeatwith"}}],[11,"clone","nom::lib::std::str::pattern","",210,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","nom::lib::std::str","",194,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","nom::lib::std::iter","",153,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"clone","nom::lib::std::ops","",79,{"inputs":[{"name":"self"}],"output":{"name":"rangefrom"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"rangefull"}}],[11,"clone","nom::lib::std::slice","",195,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"clone","nom::lib::std::str","",179,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","nom::lib::std::ops","",66,{"inputs":[{"name":"self"}],"output":{"name":"rangeto"}}],[11,"clone","nom::lib::std::option","",211,{"inputs":[{"name":"self"}],"output":{"name":"noneerror"}}],[11,"clone","nom::lib::std::cmp","",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","nom::lib::std::str","",190,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","nom::lib::std::iter","",196,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"clone","nom::lib::std::ops","",62,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"clone","nom::lib::std::str","",159,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","nom::lib::std::ops","",143,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"clone","nom::lib::std::str","",151,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","nom::lib::std::slice","",187,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","nom::lib::std::iter","",178,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"clone","nom::lib::std::str","",180,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"clone","nom::lib::std::fmt","",212,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"clone","nom::lib::std::str","",174,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","nom::lib::std::iter","",155,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"clone","nom::lib::std::str","",164,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"clone","nom::lib::std::prelude::v1::v1","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","nom::lib::std::iter","",156,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"clone","nom::lib::std::mem","",213,{"inputs":[{"name":"self"}],"output":{"name":"manuallydrop"}}],[11,"clone_from","","",213,null],[11,"clone","nom::lib::std::prelude::v1::v1","",82,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","nom::lib::std::str","",200,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","nom::lib::std::str::pattern","",214,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","nom::lib::std::iter","",146,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"clone","nom::lib::std::str","",197,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","nom::lib::std::collections","",13,{"inputs":[{"name":"self"}],"output":{"name":"collectionallocerr"}}],[11,"clone","nom::lib::std::str","",154,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","nom::lib::std::iter","",189,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"clone","nom::lib::std::slice","",145,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","nom::lib::std::iter","",172,{"inputs":[{"name":"self"}],"output":{"name":"stepby"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"clone","nom::lib::std::result","",185,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","nom::lib::std::mem","",215,{"inputs":[{"name":"self"}],"output":{"name":"discriminant"}}],[11,"clone","nom::lib::std::str::pattern","",216,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","nom::lib::std::iter","",147,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"clone","nom::lib::std::str","",198,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","nom::lib::std::cmp","",8,{"inputs":[{"name":"self"}],"output":{"name":"reverse"}}],[11,"clone","nom::lib::std::iter","",201,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"clone","nom::lib::std::str","",149,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","nom::lib::std::hash","",208,{"inputs":[{"name":"self"}],"output":{"name":"buildhasherdefault"}}],[11,"clone","nom::lib::std::slice","",173,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","nom::lib::std::iter","",191,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"clone","nom::lib::std::slice","",157,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"clone","nom::lib::std::iter","",203,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"clone","nom::lib::std::option","",160,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","nom::lib::std::slice","",176,{"inputs":[{"name":"self"}],"output":{"name":"exactchunks"}}],[11,"clone","nom::lib::std::iter","",169,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"clone","nom::lib::std::str","",137,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","nom::lib::std::iter","",183,{"inputs":[{"name":"self"}],"output":{"name":"scan"}}],[11,"clone","nom::lib::std::str::pattern","",217,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","nom::lib::std::fmt","",140,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","nom::lib::std::iter","",202,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"partial_cmp","nom::lib::std::cmp","",8,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"partial_cmp","nom::lib::std::option","",211,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","nom::lib::std::fmt","",140,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","nom::lib::std::cmp","",7,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","nom::lib::std::ops","",62,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",81,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",81,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",81,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",81,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",81,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","nom::lib::std::mem","",213,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",213,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"le","","",213,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"gt","","",213,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ge","","",213,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",82,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",82,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",82,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",82,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",82,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"next_back","nom::lib::std::str","",190,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::iter","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",168,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",168,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","nom::lib::std::slice","",192,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",192,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",192,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::iter","",196,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",196,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",196,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","nom::lib::std::option","",152,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::iter","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",169,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",169,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",156,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",156,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","nom::lib::std::str","",194,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","nom::lib::std::iter","",189,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",189,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",189,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"rfind","","",189,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::str","",151,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"rfind","","",151,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::iter","",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::str","",175,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","nom::lib::std::iter","",203,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::result","",185,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::str","",197,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","nom::lib::std::ops","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",143,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"next_back","nom::lib::std::str","",154,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",198,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","nom::lib::std::option","",160,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::slice","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::str","",179,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","nom::lib::std::result","",193,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::slice","",145,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",145,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",145,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",195,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::ops","",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::iter","",186,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",186,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",186,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","","",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",146,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",146,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","nom::lib::std::str","",181,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next_back","nom::lib::std::slice","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::iter","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",167,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"r"}}],[11,"rfold","","",167,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","nom::lib::std::str","",205,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","nom::lib::std::iter","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",147,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",147,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","nom::lib::std::str","",188,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","nom::lib::std::iter","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",147,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",147,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",155,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next_back","","",191,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",191,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",191,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",206,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::option","",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::iter","",184,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",184,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",184,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","nom::lib::std::str","",159,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","nom::lib::std::slice","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::str","",149,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","nom::lib::std::slice","",187,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::str","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::iter","",199,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::slice","",148,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::result","",204,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","nom::lib::std::prelude::v1::v1","",82,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"cmp","","",81,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"cmp","nom::lib::std::option","",211,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"ordering"}}],[11,"cmp","nom::lib::std::fmt","",140,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"cmp","nom::lib::std::mem","",213,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"ordering"}}],[11,"cmp","nom::lib::std::cmp","",8,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"ordering"}}],[11,"cmp","nom::lib::std::ops","",62,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"ordering"}}],[11,"cmp","nom::lib::std::cmp","",7,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"from_iter","nom::lib::std::prelude::v1::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",82,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"from_iter","","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",81,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"write","nom::lib::std::hash","",209,null],[11,"finish","","",209,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hash","nom::lib::std::mem","",213,null],[11,"hash","nom::lib::std::prelude::v1::v1","",81,null],[11,"hash","nom::lib::std::mem","",215,null],[11,"hash","nom::lib::std::prelude::v1::v1","",82,null],[11,"hash","nom::lib::std::fmt","",140,null],[11,"hash","nom::lib::std::ops","",79,null],[11,"hash","nom::lib::std::cmp","",7,null],[11,"hash","nom::lib::std::ops","",14,null],[11,"hash","","",78,null],[11,"hash","","",143,null],[11,"hash","","",56,null],[11,"hash","nom::lib::std::cmp","",8,null],[11,"hash","nom::lib::std::ops","",62,null],[11,"hash","","",144,null],[11,"hash","","",66,null],[11,"hash","nom::lib::std::option","",211,null],[11,"eq","nom::lib::std::str","",141,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::ops","",79,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::option","",211,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::prelude::v1::v1","",81,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::ops","",14,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::cmp","",8,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::ops","",66,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::str::pattern","",86,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::ops","",56,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::str","",137,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::ops","",144,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::fmt","",140,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::collections","",13,{"inputs":[{"name":"self"},{"name":"collectionallocerr"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::mem","",213,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ne","","",213,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::cmp","",7,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::prelude::v1::v1","",82,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::ops","",143,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::mem","",215,{"inputs":[{"name":"self"},{"name":"discriminant"}],"output":{"name":"bool"}}],[11,"next_back","nom::lib::std::str::pattern","",210,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",210,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",210,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",216,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",216,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",217,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",217,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",217,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",214,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",214,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sum","nom::lib::std::prelude::v1::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the sum of all elements is returned.",82,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"get","nom::lib::std::ops","",66,null],[11,"get_mut","","",66,null],[11,"get_unchecked","","",66,null],[11,"get_unchecked_mut","","",66,null],[11,"index","","",66,null],[11,"index_mut","","",66,null],[11,"get","","",143,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",143,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",143,null],[11,"get_unchecked_mut","","",143,null],[11,"index","","",143,null],[11,"index_mut","","",143,null],[11,"get","","",79,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",79,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",79,null],[11,"get_unchecked_mut","","",79,null],[11,"index","","",79,null],[11,"index_mut","","",79,null],[11,"get","","",143,null],[11,"get_mut","","",143,null],[11,"get_unchecked","","",143,null],[11,"get_unchecked_mut","","",143,null],[11,"index","","",143,null],[11,"index_mut","","",143,null],[11,"get","","",144,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",144,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",144,null],[11,"get_unchecked_mut","","",144,null],[11,"index","","",144,null],[11,"index_mut","","",144,null],[11,"get","","",144,null],[11,"get_mut","","",144,null],[11,"get_unchecked","","",144,null],[11,"get_unchecked_mut","","",144,null],[11,"index","","",144,null],[11,"index_mut","","",144,null],[11,"get","","",78,null],[11,"get_mut","","",78,null],[11,"get_unchecked","","",78,null],[11,"get_unchecked_mut","","",78,null],[11,"index","","",78,null],[11,"index_mut","","",78,null],[11,"get","","",56,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",56,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",56,null],[11,"get_unchecked_mut","","",56,null],[11,"index","","",56,null],[11,"index_mut","","",56,null],[11,"get","","",78,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",78,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",78,null],[11,"get_unchecked_mut","","",78,null],[11,"index","","",78,null],[11,"index_mut","","",78,null],[11,"get","","",66,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",66,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",66,null],[11,"get_unchecked_mut","","",66,null],[11,"index","","",66,null],[11,"index_mut","","",66,null],[11,"get","","",79,null],[11,"get_mut","","",79,null],[11,"get_unchecked","","",79,null],[11,"get_unchecked_mut","","",79,null],[11,"index","","",79,null],[11,"index_mut","","",79,null],[11,"get","","",56,null],[11,"get_mut","","",56,null],[11,"get_unchecked","","",56,null],[11,"get_unchecked_mut","","",56,null],[11,"index","","",56,null],[11,"index_mut","","",56,null],[11,"len","nom::lib::std::iter","",147,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",147,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",206,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",156,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",146,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",189,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",189,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",199,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",167,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","nom::lib::std::slice","",176,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",148,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","nom::lib::std::iter","",184,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","nom::lib::std::slice","",192,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","nom::lib::std::str","",151,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",151,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","nom::lib::std::fmt","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::fmt","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::mem","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref_mut","nom::lib::std::mem","",218,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",213,null],[11,"haystack","nom::lib::std::str::pattern","",217,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",217,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",217,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",217,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",210,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",210,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",210,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",210,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",216,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",216,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",216,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",214,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",214,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",214,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_result","nom::lib::std::prelude::v1::v1","",82,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ok","","",82,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_error","","",82,{"inputs":[{"name":"e"}],"output":{"name":"result"}}],[11,"into_result","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["noneerror"],"name":"result"}}],[11,"from_ok","","",81,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_error","","",81,{"inputs":[{"name":"noneerror"}],"output":{"name":"option"}}],[11,"deref","nom::lib::std::mem","",218,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",213,null],[11,"default","nom::lib::std::hash","",209,{"inputs":[],"output":{"name":"siphasher"}}],[11,"default","nom::lib::std::fmt","",140,{"inputs":[],"output":{"name":"error"}}],[11,"default","nom::lib::std::mem","",213,{"inputs":[],"output":{"name":"manuallydrop"}}],[11,"default","nom::lib::std::prelude::v1::v1","Returns [`None`].",81,{"inputs":[],"output":{"name":"option"}}],[11,"default","nom::lib::std::hash","",208,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"default","nom::lib::std::iter","",199,{"inputs":[],"output":{"name":"empty"}}],[11,"default","nom::lib::std::cmp","",8,{"inputs":[],"output":{"name":"reverse"}}],[11,"fmt","nom::lib::std::mem","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::ops","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str::pattern","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::ops","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::fmt","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str::pattern","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str::pattern","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::fmt","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::hash","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::ops","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::cmp","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::mem","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::result","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::ops","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str::pattern","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::option","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::mem","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::ops","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::option","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::result","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::result","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::mem","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::ops","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::hash","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::prelude::v1::v1","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::prelude::v1::v1","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::ops","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str::pattern","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::cmp","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::ops","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::str","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::option","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::slice","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::iter","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::option","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_ref","nom::lib::std::prelude::v1::v1","",136,null],[11,"as_ref","","",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",136,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",115,null],[11,"as_ref","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_string","","",115,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"box"}}],[11,"default","","Creates an empty `Vec<T>`.",136,{"inputs":[],"output":{"name":"vec"}}],[11,"default","nom::lib::std::collections::vec_deque","Creates an empty `VecDeque<T>`.",219,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"default","nom::lib::std::collections::btree_set","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",220,{"inputs":[],"output":{"name":"btreeset"}}],[11,"default","nom::lib::std::prelude::v1::v1","Creates an empty `String`.",115,{"inputs":[],"output":{"name":"string"}}],[11,"default","","",114,{"inputs":[],"output":{"generics":["str"],"name":"box"}}],[11,"default","","Creates a `Box<T>`, with the `Default` value for T.",114,{"inputs":[],"output":{"name":"box"}}],[11,"default","nom::lib::std::collections::btree_map","Creates an empty `BTreeMap<K, V>`.",221,{"inputs":[],"output":{"name":"btreemap"}}],[11,"default","nom::lib::std::collections","Creates an empty `LinkedList<T>`.",222,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"default","nom::lib::std::collections::binary_heap","Creates an empty `BinaryHeap<T>`.",223,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"finish","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",114,null],[11,"write_u8","","",114,null],[11,"write_u16","","",114,null],[11,"write_u32","","",114,null],[11,"write_u64","","",114,null],[11,"write_u128","","",114,null],[11,"write_usize","","",114,null],[11,"write_i8","","",114,null],[11,"write_i16","","",114,null],[11,"write_i32","","",114,null],[11,"write_i64","","",114,null],[11,"write_i128","","",114,null],[11,"write_isize","","",114,null],[11,"from_iter","nom::lib::std::collections::binary_heap","",223,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"from_iter","nom::lib::std::collections::vec_deque","",219,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"from_iter","nom::lib::std::prelude::v1::v1","",115,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",115,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",115,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","nom::lib::std::collections","",222,{"inputs":[{"name":"i"}],"output":{"name":"linkedlist"}}],[11,"from_iter","nom::lib::std::collections::btree_map","",221,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"from_iter","nom::lib::std::prelude::v1::v1","",115,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",115,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",136,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"from_iter","nom::lib::std::collections::btree_set","",220,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"next","nom::lib::std::collections::btree_map","",224,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::collections::linked_list","",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",225,null],[11,"next","nom::lib::std::vec","",226,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",226,null],[11,"next","nom::lib::std::collections::vec_deque","",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",227,null],[11,"next","nom::lib::std::collections::linked_list","",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",228,null],[11,"next","nom::lib::std::collections::btree_set","",229,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",229,null],[11,"next","nom::lib::std::collections::btree_map","",230,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",230,null],[11,"next","nom::lib::std::collections::btree_set","",231,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",231,null],[11,"next","nom::lib::std::collections::btree_map","",232,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",232,null],[11,"next","nom::lib::std::collections::btree_set","",233,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::collections::btree_map","",234,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",234,null],[11,"next","nom::lib::std::collections::vec_deque","",235,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",235,null],[11,"next","nom::lib::std::collections::btree_map","",236,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",236,null],[11,"next","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"nth","","",114,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::collections::btree_set","",237,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",237,null],[11,"next","nom::lib::std::collections::vec_deque","",238,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",238,null],[11,"fold","","",238,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","nom::lib::std::vec","",239,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",239,null],[11,"next","nom::lib::std::collections::binary_heap","",240,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",240,null],[11,"next","nom::lib::std::collections::btree_set","",241,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",241,null],[11,"next","nom::lib::std::vec","",242,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",242,null],[11,"next","nom::lib::std::collections::linked_list","",243,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",243,null],[11,"next","","",244,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"next","nom::lib::std::collections::btree_map","",245,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","nom::lib::std::collections::btree_set","",246,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",246,null],[11,"next","nom::lib::std::collections::vec_deque","",247,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",247,null],[11,"fold","","",247,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","nom::lib::std::collections::binary_heap","",248,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",248,null],[11,"next","nom::lib::std::string","",249,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",249,null],[11,"next","nom::lib::std::vec","",250,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",250,null],[11,"count","","",250,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","nom::lib::std::collections::btree_set","",251,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",251,null],[11,"next","nom::lib::std::collections::binary_heap","",252,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",252,null],[11,"next","nom::lib::std::collections::btree_map","",253,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",253,null],[11,"next","","",254,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",254,null],[11,"next_back","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::linked_list","",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::vec","",239,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::btree_map","",253,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",224,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::btree_set","",251,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::btree_map","",254,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::vec_deque","",238,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",238,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","nom::lib::std::collections::linked_list","",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::string","",249,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next_back","nom::lib::std::collections::btree_map","",234,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::vec_deque","",247,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",247,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","nom::lib::std::collections::btree_map","",236,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",245,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::btree_set","",233,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::vec_deque","",235,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::vec","",226,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::linked_list","",244,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::vec","",250,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::binary_heap","",252,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",240,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::btree_set","",237,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::vec_deque","",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::binary_heap","",248,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","nom::lib::std::collections::btree_map","",232,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",230,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","nom::lib::std::collections::binary_heap","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_map","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::vec","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::vec_deque","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::vec","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_map","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::string","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::linked_list","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::string","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_map","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::vec","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_map","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::binary_heap","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_set","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::prelude::v1::v1","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::string","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_set","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::binary_heap","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::string","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_set","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_set","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::linked_list","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_map","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::boxed","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::linked_list","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_set","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_map","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::vec","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::binary_heap","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::vec_deque","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_map","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::vec_deque","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_map","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::vec_deque","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::binary_heap","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_map","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::vec_deque","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::collections::btree_set","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::boxed","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","",115,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"is_empty","nom::lib::std::collections::binary_heap","",252,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","nom::lib::std::collections::vec_deque","",227,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",247,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","nom::lib::std::collections::binary_heap","",248,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","nom::lib::std::collections::btree_map","",254,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","nom::lib::std::collections::vec_deque","",238,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","nom::lib::std::vec","",239,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","nom::lib::std::collections::btree_set","",251,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","nom::lib::std::collections::binary_heap","",240,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","nom::lib::std::collections::btree_map","",230,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",234,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","nom::lib::std::vec","",250,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","nom::lib::std::collections::btree_map","",236,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","nom::lib::std::collections::btree_set","",237,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","nom::lib::std::collections::btree_map","",253,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",232,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add_assign","nom::lib::std::prelude::v1::v1","",115,null],[11,"from","","",136,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","nom::lib::std::collections::vec_deque","",219,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","nom::lib::std::prelude::v1::v1","",136,{"inputs":[{"name":"string"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",115,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"string"}}],[11,"from","","",114,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from","","",136,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from","","",115,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","","",136,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"from","","",114,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"box"}}],[11,"from","","",114,null],[11,"from","","",136,null],[11,"from","","",114,{"inputs":[{"name":"pinbox"}],"output":{"name":"box"}}],[11,"from","","",136,null],[11,"from","nom::lib::std::collections::binary_heap","",223,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","nom::lib::std::prelude::v1::v1","",136,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from","","",115,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"string"}}],[11,"from","","",114,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"from","","",136,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"from","nom::lib::std::boxed","",257,{"inputs":[{"name":"box"}],"output":{"name":"pinbox"}}],[11,"from","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"box"}}],[11,"write_str","","",115,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",115,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str","","",115,{"inputs":[{"name":"str"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"deref_mut","nom::lib::std::collections::binary_heap","",256,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","nom::lib::std::boxed","",257,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",136,null],[11,"deref_mut","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections","",222,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",222,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",115,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::btree_set","",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::collections::btree_map","",221,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::string","",138,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","nom::lib::std::prelude::v1::v1","",115,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","nom::lib::std::collections::vec_deque","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","","",219,null],[11,"eq","nom::lib::std::prelude::v1::v1","",136,null],[11,"ne","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"extend","nom::lib::std::collections::vec_deque","",219,null],[11,"extend","nom::lib::std::prelude::v1::v1","",115,null],[11,"extend","nom::lib::std::collections","",222,null],[11,"extend","nom::lib::std::collections::binary_heap","",223,null],[11,"extend","nom::lib::std::prelude::v1::v1","",115,null],[11,"extend","","",115,null],[11,"extend","nom::lib::std::collections::btree_set","",220,null],[11,"extend","nom::lib::std::collections::btree_map","",221,null],[11,"extend","nom::lib::std::collections::binary_heap","",223,null],[11,"extend","nom::lib::std::collections::btree_set","",220,null],[11,"extend","nom::lib::std::prelude::v1::v1","",115,null],[11,"extend","nom::lib::std::collections::vec_deque","",219,null],[11,"extend","nom::lib::std::collections","",222,null],[11,"extend","nom::lib::std::prelude::v1::v1","",136,null],[11,"extend","nom::lib::std::collections::btree_map","",221,null],[11,"extend","nom::lib::std::prelude::v1::v1","",136,null],[11,"extend","","",115,null],[11,"borrow_mut","","",136,null],[11,"borrow_mut","","",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"resume","","",114,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"partial_cmp","nom::lib::std::collections::btree_map","",221,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",136,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","nom::lib::std::collections::btree_set","",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",115,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",115,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",115,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",115,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",115,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","nom::lib::std::collections::vec_deque","",219,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","nom::lib::std::collections","",222,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"deref","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",136,null],[11,"deref","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","nom::lib::std::boxed","",257,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","nom::lib::std::collections::binary_heap","",256,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","nom::lib::std::prelude::v1::v1","",136,null],[11,"as_mut","","",136,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"hash","","",136,null],[11,"hash","","",114,null],[11,"hash","nom::lib::std::collections::vec_deque","",219,null],[11,"hash","nom::lib::std::collections","",222,null],[11,"hash","nom::lib::std::prelude::v1::v1","",115,null],[11,"hash","nom::lib::std::collections::btree_set","",220,null],[11,"hash","nom::lib::std::collections::btree_map","",221,null],[11,"drop","nom::lib::std::collections","",222,null],[11,"drop","nom::lib::std::collections::vec_deque","",219,null],[11,"drop","nom::lib::std::prelude::v1::v1","",136,null],[11,"drop","nom::lib::std::vec","",250,null],[11,"drop","","",242,null],[11,"drop","nom::lib::std::collections::vec_deque","",235,null],[11,"drop","nom::lib::std::prelude::v1::v1","",114,null],[11,"drop","nom::lib::std::collections::btree_map","",221,null],[11,"drop","nom::lib::std::collections::binary_heap","",256,null],[11,"drop","nom::lib::std::collections::linked_list","",243,null],[11,"drop","nom::lib::std::collections::btree_map","",230,null],[11,"drop","nom::lib::std::vec","",239,null],[11,"drop","nom::lib::std::string","",249,null],[11,"drop","nom::lib::std::vec","",226,null],[11,"call_once","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",114,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"fmt","nom::lib::std::boxed","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::string","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","nom::lib::std::string","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"borrow","nom::lib::std::prelude::v1::v1","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","","",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",136,null],[11,"into_iter","nom::lib::std::collections","Consumes the list into an iterator yielding elements by value.",222,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","nom::lib::std::collections::vec_deque","Consumes the `VecDeque` into a front-to-back iterator yielding elements by value.",219,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","nom::lib::std::collections::binary_heap","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",223,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","nom::lib::std::prelude::v1::v1","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",136,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","nom::lib::std::collections::btree_map","",221,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","nom::lib::std::collections::btree_set","Gets an iterator for moving out the `BTreeSet`'s contents.",220,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"cmp","nom::lib::std::collections","",222,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"cmp","nom::lib::std::prelude::v1::v1","",136,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"cmp","nom::lib::std::collections::btree_map","",221,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"cmp","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"cmp","nom::lib::std::collections::vec_deque","",219,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"cmp","nom::lib::std::collections::btree_set","",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"cmp","nom::lib::std::prelude::v1::v1","",115,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"index","","",115,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",115,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",115,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",115,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","nom::lib::std::collections::vec_deque","",219,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index","nom::lib::std::collections::btree_map","Returns a reference to the value corresponding to the supplied key.",221,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index","nom::lib::std::prelude::v1::v1","",115,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index","","",115,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",136,null],[11,"index_mut","","",115,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",115,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","nom::lib::std::collections::vec_deque","",219,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","nom::lib::std::prelude::v1::v1","",136,null],[11,"index_mut","","",115,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",115,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",115,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",115,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"clone","nom::lib::std::collections::btree_map","",221,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"clone","nom::lib::std::prelude::v1::v1","",115,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_from","","",115,null],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",114,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",114,null],[11,"clone","nom::lib::std::collections::btree_map","",245,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","nom::lib::std::collections::binary_heap","",248,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","nom::lib::std::string","",138,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","nom::lib::std::collections::binary_heap","",223,{"inputs":[{"name":"self"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",223,null],[11,"clone","","",252,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","nom::lib::std::collections::btree_set","",251,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"clone","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","nom::lib::std::collections::vec_deque","",247,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","nom::lib::std::prelude::v1::v1","",136,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",136,null],[11,"clone","nom::lib::std::collections::btree_map","",236,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"clone","nom::lib::std::collections::vec_deque","",219,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"clone","nom::lib::std::collections::btree_set","",231,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"clone","nom::lib::std::collections::linked_list","",225,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","nom::lib::std::collections::btree_set","",220,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"clone","nom::lib::std::collections::btree_map","",232,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","nom::lib::std::collections::btree_set","",246,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"clone","nom::lib::std::vec","",250,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","nom::lib::std::collections::btree_map","",234,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","nom::lib::std::prelude::v1::v1","",114,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"clone","nom::lib::std::collections::linked_list","",244,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","nom::lib::std::collections::vec_deque","",227,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","nom::lib::std::collections::btree_set","",233,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"clone","nom::lib::std::collections","",222,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"new","nom::lib::std::boxed","Allocate memory on the heap, move the data into it and pin it.",257,{"inputs":[{"name":"t"}],"output":{"name":"pinbox"}}],[11,"as_pin","","Get a pinned reference to the data in this PinBox.",257,{"inputs":[{"name":"self"}],"output":{"name":"pin"}}],[11,"get_mut","","Get a mutable reference to the data inside this PinBox.",257,{"inputs":[{"name":"pinbox"}],"output":{"name":"t"}}],[11,"unpin","","Convert this PinBox into an unpinned Box.",257,{"inputs":[{"name":"pinbox"}],"output":{"name":"box"}}],[11,"reverse","nom::lib::std::cmp","Reverses the `Ordering`.",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",7,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"contains","nom::lib::std::ops","Returns `true` if `item` is contained in the range.",58,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"key","nom::lib::std::collections::hash_map","Gets a reference to the key that would be used when inserting a value through the `VacantEntry`.",134,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",134,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",134,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",119,{"inputs":[],"output":{"name":"randomstate"}}],[11,"new","","Creates a new `DefaultHasher`.",117,{"inputs":[],"output":{"name":"defaulthasher"}}],[11,"key","","Gets a reference to the key in the entry.",135,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_entry","","Take the ownership of the key and value from the map.",135,null],[11,"get","","Gets a reference to the value in the entry.",135,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",135,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself.",135,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value.",135,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it.",135,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"replace_entry","","Replaces the entry, returning the old key and value. The new key in the hash map will be the key used to create this entry.",135,null],[11,"replace_key","","Replaces the key in the hash map with the key used to create this entry.",135,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"new","","Creates an empty `HashMap`.",118,{"inputs":[],"output":{"generics":["randomstate"],"name":"hashmap"}}],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",118,{"inputs":[{"name":"usize"}],"output":{"generics":["randomstate"],"name":"hashmap"}}],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash builder to hash keys.",118,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity, using `hash_builder` to hash the keys.",118,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",118,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",118,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashMap`. The collection may reserve more space to avoid frequent reallocations.",118,null],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `HashMap<K,V>`. The collection may reserve more space to avoid frequent reallocations.",118,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["collectionallocerr"],"name":"result"}}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",118,null],[11,"shrink_to","","Shrinks the capacity of the map with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",118,null],[11,"keys","","An iterator visiting all keys in arbitrary order. The iterator element type is `&'a K`.",118,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order. The iterator element type is `&'a V`.",118,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order. The iterator element type is `&'a mut V`.",118,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. The iterator element type is `(&'a K, &'a V)`.",118,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is `(&'a K, &'a mut V)`.",118,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",118,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",118,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",118,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",118,null],[11,"get","","Returns a reference to the value corresponding to the key.",118,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied key.",118,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",118,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",118,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",118,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",118,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove_entry","","Removes a key from the map, returning the stored key and value if the key was previously in the map.",118,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",118,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",11,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"entry"}}],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",11,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"new","nom::lib::std::collections::hash_set","Creates an empty `HashSet`.",116,{"inputs":[],"output":{"generics":["randomstate"],"name":"hashset"}}],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",116,{"inputs":[{"name":"usize"}],"output":{"generics":["randomstate"],"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash keys.",116,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with with the specified capacity, using `hasher` to hash the keys.",116,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",116,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashSet`. The collection may reserve more space to avoid frequent reallocations.",116,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",116,null],[11,"shrink_to","","Shrinks the capacity of the set with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",116,null],[11,"iter","","An iterator visiting all elements in arbitrary order. The iterator element type is `&'a T`.",116,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`.",116,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both.",116,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`.",116,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates.",116,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",116,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",116,null],[11,"contains","","Returns `true` if the set contains a value.",116,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",116,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",116,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",116,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",116,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",116,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",116,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",116,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",116,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",116,null],[11,"key","nom::lib::std::collections::btree_map","Gets a reference to the key in the entry.",255,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_entry","","Take ownership of the key and value from the map.",255,null],[11,"get","","Gets a reference to the value in the entry.",255,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",255,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",255,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",255,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",221,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",221,null],[11,"get","","Returns a reference to the value corresponding to the key.",221,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied key.",221,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns `true` if the map contains a value for the specified key.",221,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",221,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",221,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",221,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",221,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",221,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",221,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",221,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",221,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreemap"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",221,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",221,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",221,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",221,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",221,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",221,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the map contains no elements.",221,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",258,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",258,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",12,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"entry"}}],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",12,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"new","nom::lib::std::collections","Creates an empty `LinkedList`.",222,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",222,null],[11,"iter","","Provides a forward iterator.",222,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",222,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",222,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",222,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",222,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",222,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",222,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",222,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",222,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",222,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"new","nom::lib::std::collections::btree_set","Makes a new `BTreeSet` with a reasonable choice of B.",220,{"inputs":[],"output":{"name":"btreeset"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",220,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"clear","","Clears the set, removing all values.",220,null],[11,"contains","","Returns `true` if the set contains a value.",220,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",220,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",220,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",220,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",220,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",220,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",220,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",220,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",220,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",220,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"len","","Returns the number of elements in the set.",220,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no elements.",220,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","nom::lib::std::collections::binary_heap","Creates an empty `BinaryHeap` as a max-heap.",223,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",223,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",223,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",223,{"inputs":[{"name":"self"}],"output":{"generics":["peekmut"],"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",223,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",223,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",223,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",223,null],[11,"shrink_to","","Discards capacity with a lower bound.",223,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",223,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",223,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",223,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",223,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",223,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",223,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",223,null],[11,"pop","","Removes the peeked value from the heap and returns it.",256,{"inputs":[{"name":"peekmut"}],"output":{"name":"t"}}],[11,"new","nom::lib::std::collections::vec_deque","Creates an empty `VecDeque`.",219,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",219,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",219,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",219,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",219,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",219,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",219,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",219,null],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",219,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["collectionallocerr"],"name":"result"}}],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `VecDeque<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",219,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["collectionallocerr"],"name":"result"}}],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",219,null],[11,"shrink_to","","Shrinks the capacity of the `VecDeque` with a lower bound.",219,null],[11,"truncate","","Shortens the `VecDeque`, dropping excess elements from the back.",219,null],[11,"iter","","Returns a front-to-back iterator.",219,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",219,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",219,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",219,null],[11,"len","","Returns the number of elements in the `VecDeque`.",219,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",219,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",219,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the `VecDeque`, removing all values.",219,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",219,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the `VecDeque` is empty.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the `VecDeque` is empty.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the `VecDeque` is empty.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the `VecDeque` is empty.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the `VecDeque` is empty.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Prepends an element to the `VecDeque`.",219,null],[11,"push_back","","Appends an element to the back of the `VecDeque`.",219,null],[11,"pop_back","","Removes the last element from the `VecDeque` and returns it, or `None` if it is empty.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",219,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",219,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",219,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",219,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the `VecDeque` into two at the given index.",219,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",219,null],[11,"retain","","Retains only the elements specified by the predicate.",219,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements from the back or by appending clones of `value` to the back.",219,null],[11,"insert_next","nom::lib::std::collections::linked_list","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",228,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"entry","nom::lib::std::fmt","Adds a new entry to the set output.",259,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",259,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",259,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",260,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",260,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",207,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",207,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",207,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",207,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"flags","","Flags for formatting",207,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",207,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",207,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be.",207,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types.",207,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",207,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",207,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",207,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",207,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",207,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",207,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",207,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",207,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",207,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"field","","Adds a new field to the generated struct output.",261,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",261,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",262,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",262,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",262,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",263,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",263,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",263,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","nom::lib::std::hash","Creates a new `SipHasher` with the two initial keys set to 0.",209,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",209,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"peek","nom::lib::std::iter","Returns a reference to the next() value without advancing the iterator.",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","nom::lib::std::mem","Wrap a value to be manually dropped.",213,{"inputs":[{"name":"t"}],"output":{"name":"manuallydrop"}}],[11,"into_inner","","Extract the value from the ManuallyDrop container.",213,{"inputs":[{"name":"manuallydrop"}],"output":{"name":"t"}}],[11,"drop","","Manually drops the contained value.",213,null],[11,"new","","Construct a new `Pin` around a reference to some data of a type that implements `Unpin`.",218,{"inputs":[{"name":"t"}],"output":{"name":"pin"}}],[11,"new_unchecked","","Construct a new `Pin` around a reference to some data of a type that may or may not implement `Unpin`.",218,{"inputs":[{"name":"t"}],"output":{"name":"pin"}}],[11,"borrow","","Borrow a Pin for a shorter lifetime than it already has.",218,{"inputs":[{"name":"pin"}],"output":{"name":"pin"}}],[11,"get_mut","","Get a mutable reference to the data inside of this `Pin`.",218,{"inputs":[{"name":"pin"}],"output":{"name":"t"}}],[11,"map","","Construct a new pin by mapping the interior value.",218,{"inputs":[{"name":"pin"},{"name":"f"}],"output":{"name":"pin"}}],[11,"new","nom::lib::std::ops","Creates a new inclusive range. Equivalent to writing `start..=end`.",143,{"inputs":[{"name":"idx"},{"name":"idx"}],"output":{"name":"rangeinclusive"}}],[11,"start","","Returns the lower bound of the range (inclusive).",143,{"inputs":[{"name":"self"}],"output":{"name":"idx"}}],[11,"end","","Returns the upper bound of the range (inclusive).",143,{"inputs":[{"name":"self"}],"output":{"name":"idx"}}],[11,"into_inner","","Destructures the `RangeInclusive` into (lower bound, upper (inclusive) bound).",143,null],[11,"contains","","Returns `true` if `item` is contained in the range.",143,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns `true` if the range contains no items.",143,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",56,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns `true` if the range contains no items.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",66,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",78,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",79,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"is_some","nom::lib::std::prelude::v1::v1","Returns `true` if the option is a [`Some`] value.",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",81,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",81,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",81,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",81,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",81,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",81,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",81,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",81,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",81,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",81,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",81,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",81,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",81,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",81,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",81,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",81,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",81,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",81,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",81,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",81,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"is_ok","","Returns `true` if the result is [`Ok`].",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns `true` if the result is [`Err`].",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",82,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",82,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.",82,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.",82,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",82,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",82,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",82,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",82,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",82,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",82,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else, it returns `optb`.",82,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If the value is an [`Err`] then it calls `op` with its value.",82,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",82,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",82,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",82,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",82,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"e"}}],[11,"unwrap_or_default","","Returns the contained value or a default",82,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a `Result`.",82,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"into_slice","nom::lib::std::slice","View the underlying data as a subslice of the original data.",192,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",145,null],[11,"valid_up_to","nom::lib::std::str","Returns the index in the given string up to which valid UTF-8 was verified.",141,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",141,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",190,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",181,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","nom::lib::std::prelude::v1::v1","Creates a new empty `String`.",115,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",115,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",115,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"generics":["string","fromutf8error"],"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",115,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",115,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with the replacement character (U+FFFD).",115,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",115,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",115,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",115,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",115,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",115,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",115,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",115,null],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `String`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",115,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["collectionallocerr"],"name":"result"}}],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `String`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",115,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["collectionallocerr"],"name":"result"}}],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",115,null],[11,"shrink_to","","Shrinks the capacity of this `String` with a lower bound.",115,null],[11,"push","","Appends the given [`char`] to the end of this `String`.",115,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",115,null],[11,"truncate","","Shortens this `String` to the specified length.",115,null],[11,"pop","","Removes the last character from the string buffer and returns it.",115,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",115,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"retain","","Retains only the characters specified by the predicate.",115,null],[11,"insert","","Inserts a character into this `String` at a byte position.",115,null],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",115,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",115,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",115,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the string into two at the given index.",115,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",115,null],[11,"drain","","Creates a draining iterator that removes the specified range in the string and yields the removed chars.",115,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"replace_range","","Removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",115,null],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",115,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"as_bytes","nom::lib::std::string","Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.",142,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",142,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",142,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"new","nom::lib::std::prelude::v1::v1","Constructs a new, empty `Vec<T>`.",136,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",136,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",136,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",136,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",136,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",136,null],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",136,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["collectionallocerr"],"name":"result"}}],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",136,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["collectionallocerr"],"name":"result"}}],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",136,null],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",136,null],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",136,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",136,null],[11,"as_slice","","Extracts a slice containing the entire vector.",136,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",136,null],[11,"set_len","","Sets the length of a vector.",136,null],[11,"swap_remove","","Removes an element from the vector and returns it.",136,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",136,null],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",136,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",136,null],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",136,null],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",136,null],[11,"push","","Appends an element to the back of a collection.",136,null],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",136,null],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",136,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",136,null],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",136,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",136,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize_with","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",136,null],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",136,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",136,null],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",136,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",136,null],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",136,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",136,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":{"name":"splice"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",136,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"as_slice","nom::lib::std::vec","Returns the remaining items of this iterator as a slice.",250,null],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",250,null],[11,"split_at_position","nom::types","",96,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["u32"],"name":"iresult"}}],[11,"split_at_position1","","",96,{"inputs":[{"name":"self"},{"name":"p"},{"generics":["u32"],"name":"errorkind"}],"output":{"generics":["u32"],"name":"iresult"}}],[11,"split_at_position","","",95,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["u32"],"name":"iresult"}}],[11,"split_at_position1","","",95,{"inputs":[{"name":"self"},{"name":"p"},{"generics":["u32"],"name":"errorkind"}],"output":{"generics":["u32"],"name":"iresult"}}]],"paths":[[4,"CompareResult"],[4,"ErrorKind"],[4,"Needed"],[4,"Err"],[4,"Endianness"],[8,"FnBox"],[8,"PartialEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[4,"Entry"],[4,"Entry"],[4,"CollectionAllocErr"],[4,"Bound"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Write"],[8,"Display"],[8,"UpperHex"],[8,"Octal"],[8,"UpperExp"],[8,"Debug"],[8,"Binary"],[8,"LowerHex"],[8,"LowerExp"],[8,"Pointer"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Sum"],[8,"DoubleEndedIterator"],[8,"Step"],[8,"FromIterator"],[8,"Extend"],[8,"IntoIterator"],[8,"Product"],[8,"ExactSizeIterator"],[8,"Iterator"],[8,"BitAnd"],[8,"Shl"],[8,"ShlAssign"],[8,"Rem"],[8,"ShrAssign"],[8,"DivAssign"],[8,"Add"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"Fn"],[8,"Not"],[8,"Div"],[3,"Range"],[8,"Drop"],[8,"RangeBounds"],[8,"Try"],[8,"Shr"],[8,"BitXorAssign"],[4,"GeneratorState"],[8,"BitOrAssign"],[8,"IndexMut"],[8,"RemAssign"],[3,"RangeTo"],[8,"Sub"],[8,"DerefMut"],[8,"FnOnce"],[8,"BitAndAssign"],[8,"Mul"],[8,"Index"],[8,"Generator"],[8,"Neg"],[8,"Deref"],[8,"BitXor"],[8,"FnMut"],[3,"RangeToInclusive"],[3,"RangeFrom"],[8,"BitOr"],[4,"Option"],[4,"Result"],[8,"SliceConcatExt"],[8,"SliceIndex"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"ToString"],[8,"ToOwned"],[8,"Default"],[8,"Clone"],[4,"Context"],[3,"CompleteStr"],[3,"CompleteByteSlice"],[3,"Input"],[8,"InputLength"],[8,"Offset"],[8,"AsBytes"],[8,"AsChar"],[8,"InputIter"],[8,"InputTake"],[8,"InputTakeAtPosition"],[8,"Compare"],[8,"FindToken"],[8,"FindSubstring"],[8,"ParseTo"],[8,"Slice"],[8,"AtEof"],[8,"ExtendInto"],[8,"HexDisplay"],[8,"Convert"],[3,"Box"],[3,"String"],[3,"HashSet"],[3,"DefaultHasher"],[3,"HashMap"],[3,"RandomState"],[3,"Union"],[3,"SymmetricDifference"],[3,"Drain"],[3,"IterMut"],[3,"ValuesMut"],[3,"Difference"],[3,"Values"],[3,"Iter"],[3,"IntoIter"],[3,"Intersection"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"Keys"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Vec"],[3,"ParseBoolError"],[4,"ParseError"],[3,"FromUtf16Error"],[3,"Error"],[3,"Utf8Error"],[3,"FromUtf8Error"],[3,"RangeInclusive"],[3,"RangeFull"],[3,"Iter"],[3,"Inspect"],[3,"Fuse"],[3,"ExactChunksMut"],[3,"RSplit"],[3,"ChunksMut"],[3,"Bytes"],[3,"IterMut"],[3,"SkipWhile"],[3,"MatchIndices"],[3,"Skip"],[3,"Cloned"],[3,"Windows"],[3,"Peekable"],[3,"Split"],[3,"IntoIter"],[3,"Iter"],[3,"RepeatWith"],[3,"Take"],[3,"EncodeUtf16"],[3,"SplitMut"],[3,"RSplitMut"],[3,"Map"],[3,"FilterMap"],[3,"FlatMap"],[3,"RSplitN"],[3,"RSplitNMut"],[3,"StepBy"],[3,"RSplit"],[3,"RSplitN"],[3,"LinesAny"],[3,"ExactChunks"],[3,"SplitN"],[3,"Repeat"],[3,"Lines"],[3,"RMatchIndices"],[3,"Chars"],[3,"SplitNMut"],[3,"Scan"],[3,"Enumerate"],[3,"Iter"],[3,"Chain"],[3,"Split"],[3,"SplitTerminator"],[3,"Rev"],[3,"CharIndices"],[3,"Filter"],[3,"IterMut"],[3,"IterMut"],[3,"Matches"],[3,"Chunks"],[3,"Flatten"],[3,"RSplitTerminator"],[3,"SplitWhitespace"],[3,"Empty"],[3,"SplitN"],[3,"TakeWhile"],[3,"Cycle"],[3,"Zip"],[3,"IntoIter"],[3,"RMatches"],[3,"Once"],[3,"Formatter"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"CharSliceSearcher"],[3,"NoneError"],[3,"Arguments"],[19,"ManuallyDrop"],[3,"StrSearcher"],[3,"Discriminant"],[3,"CharSearcher"],[3,"CharPredicateSearcher"],[3,"Pin"],[3,"VecDeque"],[3,"BTreeSet"],[3,"BTreeMap"],[3,"LinkedList"],[3,"BinaryHeap"],[3,"RangeMut"],[3,"IntoIter"],[3,"Splice"],[3,"IntoIter"],[3,"IterMut"],[3,"Difference"],[3,"IntoIter"],[3,"SymmetricDifference"],[3,"Iter"],[3,"Range"],[3,"Keys"],[3,"Drain"],[3,"Values"],[3,"IntoIter"],[3,"IterMut"],[3,"Drain"],[3,"Drain"],[3,"Union"],[3,"DrainFilter"],[3,"DrainFilter"],[3,"Iter"],[3,"Range"],[3,"Intersection"],[3,"Iter"],[3,"Iter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"ValuesMut"],[3,"OccupiedEntry"],[3,"PeekMut"],[3,"PinBox"],[3,"VacantEntry"],[3,"DebugSet"],[3,"DebugTuple"],[3,"DebugStruct"],[3,"DebugMap"],[3,"DebugList"]]};
initSearch(searchIndex);
